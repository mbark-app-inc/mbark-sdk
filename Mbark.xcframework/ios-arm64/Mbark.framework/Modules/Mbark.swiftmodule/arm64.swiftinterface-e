// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Mbark
import Combine
import CommonCrypto
import CoreGraphics
import CoreImage
import CoreTelephony
import Darwin/*.memcpy*/
import Dispatch
import Foundation
import ImageIO
import MachO
@_exported import Mbark
import Network
import ObjectiveC
import Security
import StoreKit
import Swift
import SystemConfiguration
import UIKit.UIColor
import UIKit.UIFont
import UIKit.UIImage
import UIKit
import UserNotifications
import MachO.dyld
import os
import ObjectiveC.runtime
extension UIResponder {
  public var mbarkId: Swift.String? {
    get
  }
}
extension UITextField {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
@objc public class MbarkActionHandler : ObjectiveC.NSObject, Mbark.MbarkHandler {
  public typealias Handler = () -> Swift.Void
  public var finish: ((Swift.Bool) -> Swift.Void)?
  public init(id: Swift.String, handler: @escaping Mbark.MbarkActionHandler.Handler)
  final public let id: Swift.String
  final public let handle: Mbark.MbarkActionHandler.Handler
  @objc override dynamic public init()
  @objc deinit
}
extension UITextView {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
public struct MbarkEventData : Swift.Codable {
  public init(name: Swift.String, value: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objc public class MbarkViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @available(*, deprecated, message: "Please use Mbark.addActionHandler(_:) directly")
  public func addActionHandler(_ actionHandler: Mbark.MbarkActionHandler)
  @available(*, deprecated, message: "Please use Mbark.removeActionHandler(forId:) directly")
  public func removeActionHandler(forId id: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension MbarkViewController {
  @objc override dynamic public func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
extension UIImageView {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
public struct ComponentValue : Swift.Codable, Swift.Hashable, Swift.Equatable {
  public let apiID: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: Mbark.ComponentValue, b: Mbark.ComponentValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension UILabel {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
extension CGSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Configurator {
  public init(name: Swift.String = "")
  public var name: Swift.String
  public func configure(_ id: Swift.String? = nil)
  @objc deinit
}
public protocol MbarkHandler : AnyObject, Swift.Hashable {
  associatedtype Handler
  var id: Swift.String { get }
  var handle: Self.Handler { get }
  var finish: ((Swift.Bool) -> Swift.Void)? { get set }
  func onFinish(_ callback: @escaping (Swift.Bool) -> Swift.Void) -> Self
  func finish(success: Swift.Bool)
}
extension MbarkHandler {
  public func hash(into hasher: inout Swift.Hasher)
  @discardableResult
  public func onFinish(_ callback: @escaping (Swift.Bool) -> Swift.Void) -> Self
  public func finish(success: Swift.Bool)
}
@objc public enum MbarkEventType : Swift.Int, Swift.RawRepresentable {
  case accept
  case authenticate
  case background
  case foreground
  case flowStart
  case flowEnd
  case input
  case longPress
  case reject
  case swipeLeft
  case swipeRight
  case tap
  case view
  public typealias RawValue = Swift.String
  public var rawValue: Mbark.MbarkEventType.RawValue {
    get
  }
  public init?(rawValue: Mbark.MbarkEventType.RawValue)
}
@objc public enum MbarkStepNames : Swift.Int, Swift.RawRepresentable {
  case loading
  public typealias RawValue = Swift.String
  public var rawValue: Mbark.MbarkStepNames.RawValue {
    get
  }
  public init?(rawValue: Mbark.MbarkStepNames.RawValue)
}
public enum AuthenticationUserType : Swift.Int, Swift.RawRepresentable {
  case new
  case existing
  public typealias RawValue = Swift.String
  public var rawValue: Mbark.AuthenticationUserType.RawValue {
    get
  }
  public init?(rawValue: Mbark.AuthenticationUserType.RawValue)
}
extension UIViewController {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
@objc public class MbarkPurchaseActionHandler : ObjectiveC.NSObject, Mbark.MbarkHandler {
  public typealias Handler = (Swift.String) -> Swift.Void
  public var finish: ((Swift.Bool) -> Swift.Void)?
  public init(id: Swift.String, handler: @escaping Mbark.MbarkPurchaseActionHandler.Handler)
  final public let id: Swift.String
  final public let handle: Mbark.MbarkPurchaseActionHandler.Handler
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class MbarkInstance : ObjectiveC.NSObject {
  @objc deinit
  public var actionHandlers: Swift.Set<Mbark.MbarkActionHandler> {
    get
  }
  public var purchaseActionHandler: Mbark.MbarkPurchaseActionHandler? {
    get
  }
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  public func trackOnce(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public func track(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  @objc override dynamic public init()
}
public typealias CGPoint = CoreGraphics.CGPoint
extension UIButton {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
extension CGPoint : Swift.AdditiveArithmetic {
  public static func + (lhs: Mbark.CGPoint, rhs: Mbark.CGPoint) -> Mbark.CGPoint
  public static func - (lhs: Mbark.CGPoint, rhs: Mbark.CGPoint) -> Mbark.CGPoint
  public static func += (lhs: inout Mbark.CGPoint, rhs: Mbark.CGPoint)
  public static func -= (lhs: inout Mbark.CGPoint, rhs: Mbark.CGPoint)
}
@_inheritsConvenienceInitializers @objc public class Mbark : ObjectiveC.NSObject {
  public static var isActive: Swift.Bool {
    get
  }
  @discardableResult
  @objc public static func initialize(instanceName: Swift.String = UUID().uuidString, selectedLanguage: Swift.String? = nil) -> Mbark.MbarkInstance?
  @discardableResult
  public static func initialize(instanceName: Swift.String = UUID().uuidString, remoteConfigId: Swift.String, productionAPIKey: Swift.String? = nil, developmentAPIKey: Swift.String? = nil, selectedLanguage: Swift.String? = nil) -> Mbark.MbarkInstance?
  public static func setMainInstance(name: Swift.String)
  public static func removeInstance(name: Swift.String)
  public static func track(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackOnce(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackFlowStart()
  public static func trackFlowEnd()
  public static func trackStepView(_ step: Swift.String, data: Mbark.MbarkEventData? = nil)
  public static func trackAuthenticationForNewUser()
  public static func trackAuthenticationForExistingUser()
  public static func trackAccept(step: Swift.String? = nil, component: Swift.String? = nil, shouldTrackOnce: Swift.Bool = false)
  public static func trackReject(step: Swift.String? = nil, component: Swift.String? = nil, shouldTrackOnce: Swift.Bool = false)
  public static func trackTap(step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackInput(step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackAppLoading()
  public static func onboarding(startingViewId mbarkId: Swift.String, onLoaded: @escaping (Swift.Bool) -> Swift.Void) -> UIKit.UINavigationController?
  public static func mbarkViewController(forMbarkId mbarkId: Swift.String, onLoaded: @escaping (Swift.Bool) -> Swift.Void) -> Mbark.MbarkViewController?
  public static func addActionHandler(_ actionHandler: Mbark.MbarkActionHandler)
  public static func removeActionHandler(forId id: Swift.String)
  public static func addPurchaseActionHandler(_ purchaseActionHandler: Mbark.MbarkPurchaseActionHandler)
  public static func removePurchaseActionHandler(forId id: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension Mbark.MbarkEventType : Swift.Equatable {}
extension Mbark.MbarkEventType : Swift.Hashable {}
extension Mbark.MbarkStepNames : Swift.Equatable {}
extension Mbark.MbarkStepNames : Swift.Hashable {}
extension Mbark.AuthenticationUserType : Swift.Equatable {}
extension Mbark.AuthenticationUserType : Swift.Hashable {}
