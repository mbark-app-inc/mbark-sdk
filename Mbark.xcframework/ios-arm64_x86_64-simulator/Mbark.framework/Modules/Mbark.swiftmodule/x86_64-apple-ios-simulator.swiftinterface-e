// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Mbark
import AVFoundation
import Combine
import CommonCrypto
import CoreGraphics
import CoreImage
import CoreTelephony
import Dispatch
import Foundation
import ImageIO
import MachO
@_exported import Mbark
import Metal
import MetalKit
import Network
import ObjectiveC
import Security
import StoreKit
import Swift
import SystemConfiguration
import UIKit.UIColor
import UIKit.UIFont
import UIKit.UIImage
import UIKit
import UserNotifications
import VideoToolbox
import MachO.dyld
import os
import ObjectiveC.runtime
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Publisher {
  public func toSignal() -> Mbark.Signal<Self.Output, Self.Failure>
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension Signal {
  public struct CombinePublisher : Combine.Publisher {
    public typealias Output = Element
    public typealias Failure = Error
    public func receive<S>(subscriber: S) where Element == S.Input, Error == S.Failure, S : Combine.Subscriber
  }
  public func toPublisher() -> Mbark.Signal<Element, Error>.CombinePublisher
}
@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension SignalProtocol {
  public func toPublisher() -> Mbark.Signal<Self.Element, Self.Error>.CombinePublisher
}
extension MTLPixelFormat {
  public static let unspecified: Metal.MTLPixelFormat
  public static let yCbCr8_420_2p: Metal.MTLPixelFormat
  public static let yCbCr8_420_2p_srgb: Metal.MTLPixelFormat
  public static let yCbCr10_420_2p: Metal.MTLPixelFormat
  public static let yCbCr10_420_2p_srgb: Metal.MTLPixelFormat
}
public struct Deferred<DeferredSignal> : Mbark.SignalProtocol where DeferredSignal : Mbark.SignalProtocol {
  public init(signalFactory: @escaping () -> DeferredSignal)
  public typealias Element = DeferredSignal.Element
  public typealias Error = DeferredSignal.Error
  public let signalFactory: () -> DeferredSignal
  public func observe(with observer: @escaping (Mbark.Signal<DeferredSignal.Element, DeferredSignal.Error>.Event) -> Swift.Void) -> Mbark.Disposable
}
extension Subscribers {
  final public class Accumulator<Input, Failure> : Mbark.Subscriber, Mbark.Cancellable where Failure : Swift.Error {
    public init()
    final public var values: [Input] {
      get
    }
    final public var isFinished: Swift.Bool {
      get
    }
    final public var isFailure: Swift.Bool {
      get
    }
    final public var error: Failure? {
      get
    }
    final public func receive(subscription: Mbark.Subscription)
    final public func receive(_ value: Input) -> Mbark.Subscribers.Demand
    final public func receive(completion: Mbark.Subscribers.Completion<Failure>)
    final public func cancel()
    @objc deinit
  }
}
public protocol ReactiveExtensions {
  associatedtype Base
  var base: Self.Base { get }
}
public struct Reactive<Base> : Mbark.ReactiveExtensions {
  public let base: Base
  public init(_ base: Base)
}
public protocol ReactiveExtensionsProvider : AnyObject {
}
extension ReactiveExtensionsProvider {
  public static var reactive: Mbark.Reactive<Self>.Type {
    get
  }
  public var reactive: Mbark.Reactive<Self> {
    get
  }
}
extension NSObject : Mbark.ReactiveExtensionsProvider {
}
extension ReactiveExtensions where Self.Base : ObjectiveC.NSObject {
  public var deallocated: Mbark.SafeSignal<Swift.Void> {
    get
  }
  public var bag: Mbark.DisposeBag {
    get
  }
  public func publisher<Value>(for keyPath: Swift.KeyPath<Self.Base, Value>, options: Foundation.NSKeyValueObservingOptions = [.initial, .new]) -> Mbark.Signal<Value, Swift.Never>
}
extension UIResponder {
  public var mbarkId: Swift.String? {
    get
  }
}
extension EffectsImage {
  public func applyingAssetTrackTransform(_ transform: CoreGraphics.CGAffineTransform) -> Mbark.EffectsImage
}
public protocol EffectsVideoCompositionRequest {
  func sourceFrame(byTrackID trackID: CoreMedia.CMPersistentTrackID) -> CoreVideo.CVPixelBuffer?
  var renderContext: AVFoundation.AVVideoCompositionRenderContext { get }
  var compositionTime: CoreMedia.CMTime { get }
  var isTrackTransformApplied: Swift.Bool { get }
}
public protocol EffectsMutableVideoCompositionRequest : Mbark.EffectsVideoCompositionRequest {
  func finish(_ result: Swift.Result<CoreVideo.CVPixelBuffer, Swift.Error>)
}
public protocol EffectsTrackedVideoCompositionRequest : Mbark.EffectsVideoCompositionRequest {
  var isCancelled: Swift.Bool { get }
}
extension AVAsynchronousVideoCompositionRequest : Mbark.EffectsMutableVideoCompositionRequest {
  public var isTrackTransformApplied: Swift.Bool {
    get
  }
  public func finish(_ result: Swift.Result<CoreVideo.CVPixelBuffer, Swift.Error>)
}
public class EffectsVideoCompositionRequestHandler {
  public init(context: Mbark.EffectsContext, tracks: [AVFoundation.AVAssetTrack], on queue: Dispatch.DispatchQueue?, filter: @escaping (Mbark.EffectsVideoCompositionRequestHandler.Request) throws -> Mbark.EffectsImage)
  public enum Error : Swift.Error {
    case cannotGenerateOutputPixelBuffer
    public static func == (a: Mbark.EffectsVideoCompositionRequestHandler.Error, b: Mbark.EffectsVideoCompositionRequestHandler.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Request {
    public let sourceImages: [CoreMedia.CMPersistentTrackID : Mbark.EffectsImage]
    public let compositionTime: CoreMedia.CMTime
    public let renderSize: CoreGraphics.CGSize
    public var anySourceImage: Mbark.EffectsImage {
      get
    }
  }
  public func handle(request: Mbark.EffectsMutableVideoCompositionRequest)
  @objc deinit
}
public class EffectsVideoComposition {
  public init(asset inputAsset: AVFoundation.AVAsset, context: Mbark.EffectsContext, queue: Dispatch.DispatchQueue?, filter: @escaping (Mbark.EffectsVideoCompositionRequestHandler.Request) throws -> Mbark.EffectsImage)
  public enum Error : Swift.Error {
    case unsupportedInstruction
    public static func == (a: Mbark.EffectsVideoComposition.Error, b: Mbark.EffectsVideoComposition.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let asset: AVFoundation.AVAsset
  @available(iOS 11.0, macOS 10.13, *)
  public var sourceTrackIDForFrameTiming: CoreMedia.CMPersistentTrackID {
    get
    set
  }
  public var frameDuration: CoreMedia.CMTime {
    get
    set
  }
  public var renderSize: CoreGraphics.CGSize {
    get
    set
  }
  @available(iOS 11, macOS 10.14, *)
  public var renderScale: Swift.Float {
    get
    set
  }
  public func makeAVVideoComposition() -> AVFoundation.AVVideoComposition
  @objc deinit
}
extension SignalProtocol {
  public func subscribe<S>(on scheduler: S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.Scheduler
  public func receive<S>(on scheduler: S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.Scheduler
}
public protocol EffectsImageViewProtocol : AnyObject {
  var automaticallyCreatesContext: Swift.Bool { get set }
  var colorPixelFormat: Metal.MTLPixelFormat { get set }
  var clearColor: Metal.MTLClearColor { get set }
  var resizingMode: Mbark.EffectsDrawableRenderingResizingMode { get set }
  var context: Mbark.EffectsContext? { get set }
  var image: Mbark.EffectsImage? { get set }
}
extension EffectsImageViewProtocol {
  public var inputPort: Mbark.Port<Self, Mbark.EffectsImage?, Swift.ReferenceWritableKeyPath<Self, Mbark.EffectsImage?>> {
    get
  }
}
extension EffectsImageView : Mbark.EffectsImageViewProtocol {
}
extension EffectsThreadSafeImageView : Mbark.EffectsImageViewProtocol {
}
extension EffectsImageView : Mbark.InputPortProvider {
  public typealias Port = Mbark.Port<Mbark.EffectsImageView, Mbark.EffectsImage?, Swift.ReferenceWritableKeyPath<Mbark.EffectsImageView, Mbark.EffectsImage?>>
}
extension EffectsThreadSafeImageView : Mbark.InputPortProvider {
  public typealias Port = Mbark.Port<Mbark.EffectsThreadSafeImageView, Mbark.EffectsImage?, Swift.ReferenceWritableKeyPath<Mbark.EffectsThreadSafeImageView, Mbark.EffectsImage?>>
}
extension Mustache {
  public static func isFoundationBaseType(value vv: Any) -> Swift.Bool
  public static func isMustacheTrue(value v: Any?) -> Swift.Bool
}
extension EffectsColor : Swift.Hashable {
  public static func == (lhs: Mbark.EffectsColor, rhs: Mbark.EffectsColor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension UITextField {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
public class MbarkActionHandler : Mbark.MbarkHandler {
  public typealias Handler = () -> Swift.Void
  public var finish: ((Swift.Bool) -> Swift.Void)?
  public init(id: Swift.String, handler: @escaping Mbark.MbarkActionHandler.Handler)
  final public let id: Swift.String
  final public let handle: Mbark.MbarkActionHandler.Handler
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension MbarkActionHandler : Swift.Equatable {
  public static func == (lhs: Mbark.MbarkActionHandler, rhs: Mbark.MbarkActionHandler) -> Swift.Bool
}
extension UITextView {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
extension EffectsComputeFunctionDispatchOptions {
  convenience public init(_ generator: @escaping (Metal.MTLComputePipelineState) -> (threads: Metal.MTLSize, threadgroups: Metal.MTLSize, threadsPerThreadgroup: Metal.MTLSize))
}
extension SignalProtocol {
  public func amb<O>(with other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, Self.Error == O.Error
  public func amb<O>(with other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, O.Error == Swift.Never
  public func combineLatest<O, U>(with other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func combineLatest<O>(with other: O) -> Mbark.Signal<(Self.Element, O.Element), Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func combineLatest<O, U>(with other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, Self.Error> where O : Mbark.SignalProtocol, O.Error == Swift.Never
  public func combineLatest<O>(with other: O) -> Mbark.Signal<(Self.Element, O.Element), Self.Error> where O : Mbark.SignalProtocol, O.Error == Swift.Never
  public func append<O>(_ other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, Self.Error == O.Error
  public func append<O>(_ other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, O.Error == Swift.Never
  public func prepend<O>(_ other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, Self.Error == O.Error
  public func prepend<O>(_ other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, O.Error == Swift.Never
  public func merge<O>(with other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, Self.Error == O.Error
  public func merge<O>(with other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element, O.Error == Swift.Never
  public func replayLatest<S>(when other: S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SignalProtocol, S.Error == Swift.Never
  public func with<O, U>(latestFrom other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func with<O>(latestFrom other: O) -> Mbark.Signal<(Self.Element, O.Element), Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func with<O, U>(latestFrom other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, Self.Error> where O : Mbark.SignalProtocol, O.Error == Swift.Never
  public func with<O>(latestFrom other: O) -> Mbark.Signal<(Self.Element, O.Element), Self.Error> where O : Mbark.SignalProtocol, O.Error == Swift.Never
  public func zip<O, U>(with other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func zip<O>(with other: O) -> Mbark.Signal<(Self.Element, O.Element), Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func zip<O, U>(with other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, Self.Error> where O : Mbark.SignalProtocol, O.Error == Swift.Never
  public func zip<O>(with other: O) -> Mbark.Signal<(Self.Element, O.Element), Self.Error> where O : Mbark.SignalProtocol, O.Error == Swift.Never
}
extension SignalProtocol where Self.Error == Swift.Never {
  public func amb<O>(with other: O) -> Mbark.Signal<Self.Element, O.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element
  public func combineLatest<O, U>(with other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, O.Error> where O : Mbark.SignalProtocol
  public func combineLatest<O>(with other: O) -> Mbark.Signal<(Self.Element, O.Element), O.Error> where O : Mbark.SignalProtocol
  public func append<O>(_ other: O) -> Mbark.Signal<Self.Element, O.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element
  public func prepend<O>(_ other: O) -> Mbark.Signal<Self.Element, O.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element
  public func merge<O>(with other: O) -> Mbark.Signal<Self.Element, O.Error> where O : Mbark.SignalProtocol, Self.Element == O.Element
  public func with<O, U>(latestFrom other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, O.Error> where O : Mbark.SignalProtocol
  public func with<O>(latestFrom other: O) -> Mbark.Signal<(Self.Element, O.Element), O.Error> where O : Mbark.SignalProtocol
  public func zip<O, U>(with other: O, combine: @escaping (Self.Element, O.Element) -> U) -> Mbark.Signal<U, O.Error> where O : Mbark.SignalProtocol
  public func zip<O>(with other: O) -> Mbark.Signal<(Self.Element, O.Element), O.Error> where O : Mbark.SignalProtocol
}
public struct MustacheParser {
  public init()
  public var openCharacter: Swift.Character {
    get
    set
  }
  public var closeCharacter: Swift.Character {
    get
    set
  }
  public mutating func parse(string s: Swift.String) -> Mbark.MustacheNode
  public mutating func parse(cstr cs: Swift.UnsafePointer<Swift.CChar>) -> Mbark.MustacheNode
}
public protocol PropertyProtocol {
  associatedtype ProperyElement
  var value: Self.ProperyElement { get }
}
final public class Property<Value> : Mbark.PropertyProtocol, Mbark.SubjectProtocol, Mbark.BindableProtocol, Mbark.DisposeBagProvider {
  public init(_ value: Value, subject: Mbark.Subject<Value, Swift.Never> = PassthroughSubject())
  @objc deinit
  final public var bag: Mbark.DisposeBag {
    get
  }
  final public var value: Value {
    get
    set
  }
  final public var readOnlyView: Mbark.AnyProperty<Value> {
    get
  }
  final public func on(_ event: Mbark.Signal<Value, Swift.Never>.Event)
  final public func observe(with observer: @escaping (Mbark.Signal<Value, Swift.Never>.Event) -> Swift.Void) -> Mbark.Disposable
  final public func silentUpdate(value: Value)
  final public func bind(signal: Mbark.Signal<Value, Swift.Never>) -> Mbark.Disposable
  public typealias Element = Value
  public typealias Error = Swift.Never
  public typealias ProperyElement = Value
}
final public class AnyProperty<Value> : Mbark.PropertyProtocol, Mbark.SignalProtocol {
  public init(property: Mbark.Property<Value>)
  final public var value: Value {
    get
  }
  final public func observe(with observer: @escaping (Mbark.Signal<Value, Swift.Never>.Event) -> Swift.Void) -> Mbark.Disposable
  public typealias Element = Value
  public typealias Error = Swift.Never
  public typealias ProperyElement = Value
  @objc deinit
}
@dynamicCallable public struct Mustache {
  public let template: Mbark.MustacheNode
  public init(_ template: Swift.String)
  public static func parse(_ template: Swift.String) -> Mbark.MustacheNode
  public func render(object: Any?) -> Swift.String
  public func dynamicallyCall(withKeywordArguments args: Swift.KeyValuePairs<Swift.String, Any>) -> Swift.String
}
public struct MbarkEventData : Swift.Codable {
  public init(name: Swift.String, value: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol ObservableObject : AnyObject {
  associatedtype ObjectWillChangeSignal : Mbark.SignalProtocol = Mbark.Signal<Swift.Void, Swift.Never> where Self.ObjectWillChangeSignal.Error == Swift.Never
  var objectWillChange: Self.ObjectWillChangeSignal { get }
}
extension ObservableObject where Self.ObjectWillChangeSignal == Mbark.Signal<Swift.Void, Swift.Never> {
  public var objectWillChange: Mbark.Signal<Swift.Void, Swift.Never> {
    get
  }
}
extension NSLock {
  convenience public init(name: Swift.String)
}
extension NSRecursiveLock {
  convenience public init(name: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class MbarkViewController : UIKit.UIViewController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidLayoutSubviews()
  @available(*, deprecated, message: "Please use Mbark.addActionHandler(_:) directly")
  public func addActionHandler(_ actionHandler: Mbark.MbarkActionHandler)
  @available(*, deprecated, message: "Please use Mbark.removeActionHandler(forId:) directly")
  public func removeActionHandler(forId id: Swift.String)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
extension MbarkViewController {
  @objc override dynamic public func motionEnded(_ motion: UIKit.UIEvent.EventSubtype, with event: UIKit.UIEvent?)
}
extension EffectsVector {
  convenience public init(values: [Swift.Float])
  convenience public init(values: [Swift.Int32])
  convenience public init(values: [Swift.UInt32])
  convenience public init(values: [Swift.Int16])
  convenience public init(values: [Swift.UInt16])
  convenience public init(values: [Swift.Int8])
  convenience public init(values: [Swift.UInt8])
}
public struct Empty<Element, Error> : Mbark.SignalProtocol, Swift.Equatable where Error : Swift.Error {
  public init(completeImmediately: Swift.Bool = true)
  public init(completeImmediately: Swift.Bool = true, outputType: Element.Type, failureType: Error.Type)
  public typealias Element = Element
  public typealias Error = Error
  public let completeImmediately: Swift.Bool
  public func observe(with observer: @escaping (Mbark.Signal<Element, Error>.Event) -> Swift.Void) -> Mbark.Disposable
  public static func == (a: Mbark.Empty<Element, Error>, b: Mbark.Empty<Element, Error>) -> Swift.Bool
}
extension UIImageView {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
extension SignalProtocol {
  public func breakpoint(receiveSubscription: (() -> Swift.Bool)? = nil, receiveOutput: ((Self.Element) -> Swift.Bool)? = nil, receiveCompletion: ((Mbark.Subscribers.Completion<Self.Error>) -> Swift.Bool)? = nil) -> Mbark.Signal<Self.Element, Self.Error>
  public func breakpointOnError() -> Mbark.Signal<Self.Element, Self.Error>
  public func debug(_ title: Swift.String? = nil, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line) -> Mbark.Signal<Self.Element, Self.Error>
  public func delay(interval: Swift.Double, on queue: Dispatch.DispatchQueue = DispatchQueue(label: "mbark.delay")) -> Mbark.Signal<Self.Element, Self.Error>
  public func `repeat`<S>(when other: @escaping (Self.Element) -> S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SignalProtocol, S.Error == Swift.Never
  public func handleEvents(receiveSubscription: (() -> Swift.Void)? = nil, receiveOutput: ((Self.Element) -> Swift.Void)? = nil, receiveCompletion: ((Mbark.Subscribers.Completion<Self.Error>) -> Swift.Void)? = nil, receiveCancel: (() -> Swift.Void)? = nil) -> Mbark.Signal<Self.Element, Self.Error>
  public func feedActivity<S>(into listener: S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SubjectProtocol, S.Element == Swift.Bool
  public func feedNext<S>(into listener: S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SubjectProtocol, Self.Element == S.Element
  public func feedNext<S>(into listener: S, when: @escaping (Self.Element) -> Swift.Bool = { _ in true }, map: @escaping (Self.Element) -> S.Element) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SubjectProtocol
  public func feedError<S>(into listener: S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SubjectProtocol, Self.Error == S.Element
  public func waitAndCollectEvents() -> [Mbark.Signal<Self.Element, Self.Error>.Event]
  public func waitAndCollectElements() -> [Self.Element]
}
public struct ComponentValue : Swift.Codable, Swift.Hashable, Swift.Equatable {
  public let apiID: Swift.String?
  public func hash(into hasher: inout Swift.Hasher)
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public static func == (a: Mbark.ComponentValue, b: Mbark.ComponentValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension NSAttributedString : Mbark.KeyValueCodingType {
}
public struct AttributedMustacheParser {
  public init()
  public var openCharacter: Swift.Character {
    get
    set
  }
  public var closeCharacter: Swift.Character {
    get
    set
  }
  public mutating func parse(attributedString s: Foundation.NSAttributedString) -> Mbark.AttributedMustacheNode
}
@propertyWrapper public struct Published<Value> {
  public init(wrappedValue: Value)
  public struct Publisher : Mbark.SignalProtocol {
    public typealias Element = Value
    public typealias Error = Swift.Never
    public func observe(with observer: @escaping (Mbark.Signal<Value, Swift.Never>.Event) -> Swift.Void) -> Mbark.Disposable
  }
  public var wrappedValue: Value {
    get
    set
  }
  public var projectedValue: Mbark.Published<Value>.Publisher {
    mutating get
  }
}
extension UILabel {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
extension CGSize : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol SignalProtocol {
  associatedtype Element
  associatedtype Error : Swift.Error
  func observe(with observer: @escaping Mbark.Observer<Self.Element, Self.Error>) -> Mbark.Disposable
}
extension SignalProtocol {
  public func observe<O>(with observer: O) -> Mbark.Disposable where O : Mbark.ObserverProtocol, Self.Element == O.Element, Self.Error == O.Error
  public func observeNext(with observer: @escaping (Self.Element) -> Swift.Void) -> Mbark.Disposable
  public func observeFailed(with observer: @escaping (Self.Error) -> Swift.Void) -> Mbark.Disposable
  public func observeCompleted(with observer: @escaping () -> Swift.Void) -> Mbark.Disposable
  public func toSignal() -> Mbark.Signal<Self.Element, Self.Error>
}
extension SignalProtocol {
  public func sink(receiveCompletion: @escaping ((Mbark.Subscribers.Completion<Self.Error>) -> Swift.Void), receiveValue: @escaping ((Self.Element) -> Swift.Void)) -> Mbark.AnyCancellable
}
extension SignalProtocol where Self.Error == Swift.Never {
  public func sink(receiveValue: @escaping ((Self.Element) -> Swift.Void)) -> Mbark.AnyCancellable
}
extension SignalProtocol where Self.Error == Swift.Never {
  public func assign<Root>(to keyPath: Swift.ReferenceWritableKeyPath<Root, Self.Element>, on object: Root) -> Mbark.AnyCancellable
}
extension SignalProtocol {
  public func subscribe<Downstream>(_ subscriber: Downstream) where Downstream : Mbark.Subscriber, Self.Element == Downstream.Input, Self.Error == Downstream.Failure
}
public protocol BindableProtocol {
  associatedtype Element
  func bind(signal: Mbark.Signal<Self.Element, Swift.Never>) -> Mbark.Disposable
}
extension SignalProtocol where Self.Error == Swift.Never {
  @discardableResult
  public func bind<B>(to bindable: B) -> Mbark.Disposable where B : Mbark.BindableProtocol, Self.Element == B.Element
  @discardableResult
  public func bind<B>(to bindable: B) -> Mbark.Disposable where B : Mbark.BindableProtocol, Self.Element == B.Element.Wrapped, B.Element : Mbark.OptionalProtocol
}
extension BindableProtocol where Self : Mbark.SignalProtocol, Self.Error == Swift.Never {
  @discardableResult
  public func bidirectionalBind<B>(to target: B) -> Mbark.Disposable where B : Mbark.BindableProtocol, B : Mbark.SignalProtocol, Self.Element == B.Element, B.Error == Swift.Never
}
extension SignalProtocol where Self.Error == Swift.Never {
  @discardableResult
  public func bind<Target>(to target: Target, setter: @escaping (Target, Self.Element) -> Swift.Void) -> Mbark.Disposable where Target : Mbark.BindingExecutionContextProvider, Target : Mbark.Deallocatable
  @discardableResult
  public func bind<Target>(to target: Target, context: Mbark.ExecutionContext, setter: @escaping (Target, Self.Element) -> Swift.Void) -> Mbark.Disposable where Target : Mbark.Deallocatable
  @discardableResult
  public func bind<Target>(to target: Target, keyPath: Swift.ReferenceWritableKeyPath<Target, Self.Element>) -> Mbark.Disposable where Target : Mbark.BindingExecutionContextProvider, Target : Mbark.Deallocatable
  @discardableResult
  public func bind<Target>(to target: Target, keyPath: Swift.ReferenceWritableKeyPath<Target, Self.Element>, context: Mbark.ExecutionContext) -> Mbark.Disposable where Target : Mbark.Deallocatable
}
extension SignalProtocol where Self.Element == Swift.Void, Self.Error == Swift.Never {
  @discardableResult
  public func bind<Target>(to target: Target, setter: @escaping (Target) -> Swift.Void) -> Mbark.Disposable where Target : Mbark.BindingExecutionContextProvider, Target : Mbark.Deallocatable
  @discardableResult
  public func bind<Target>(to target: Target, context: Mbark.ExecutionContext, setter: @escaping (Target) -> Swift.Void) -> Mbark.Disposable where Target : Mbark.Deallocatable
}
public protocol BindingExecutionContextProvider {
  var bindingExecutionContext: Mbark.ExecutionContext { get }
}
extension SignalProtocol {
  public func mapToResult() -> Mbark.Signal<Swift.Result<Self.Element, Self.Error>, Swift.Never>
  public func tryMap<U>(_ transform: @escaping (Self.Element) -> Swift.Result<U, Self.Error>) -> Mbark.Signal<U, Self.Error>
}
extension SignalProtocol where Self.Error == Swift.Never {
  public func tryMap<U, E>(_ transform: @escaping (Self.Element) -> Swift.Result<U, E>) -> Mbark.Signal<U, E> where E : Swift.Error
}
extension SignalProtocol where Self.Element : Mbark._ResultProtocol {
  public func mapValue<NewSuccess>(_ transform: @escaping (Self.Element.Value) -> NewSuccess) -> Mbark.Signal<Swift.Result<NewSuccess, Self.Element.Error>, Self.Error>
}
extension SignalProtocol where Self.Element : Mbark._ResultProtocol, Self.Error == Self.Element.Error {
  public func getValues() -> Mbark.Signal<Self.Element.Value, Self.Error>
}
extension SignalProtocol where Self.Element : Mbark._ResultProtocol, Self.Error == Swift.Never {
  public func getValues() -> Mbark.Signal<Self.Element.Value, Self.Element.Error>
}
public protocol _ResultProtocol {
  associatedtype Value
  associatedtype Error : Swift.Error
  var _unbox: Swift.Result<Self.Value, Self.Error> { get }
}
extension Result : Mbark._ResultProtocol {
  public var _unbox: Swift.Result<Success, Failure> {
    get
  }
  public typealias Error = Failure
  public typealias Value = Success
}
extension UIImageView {
  @objc dynamic open func mbark_display(image: UIKit.UIImage?)
}
extension Signal {
  public enum Event {
    case next(Element)
    case failed(Error)
    case completed
  }
}
extension Signal.Event {
  public var isNext: Swift.Bool {
    get
  }
  public var isFailed: Swift.Bool {
    get
  }
  public var isCompleted: Swift.Bool {
    get
  }
  public var isTerminal: Swift.Bool {
    get
  }
  public var element: Element? {
    get
  }
  public var error: Error? {
    get
  }
}
extension Signal.Event : Swift.Equatable where Element : Swift.Equatable, Error : Swift.Equatable {
  public static func == (a: Mbark.Signal<Element, Error>.Event, b: Mbark.Signal<Element, Error>.Event) -> Swift.Bool
}
public protocol Deallocatable : AnyObject {
  var deallocated: Mbark.SafeSignal<Swift.Void> { get }
}
public protocol DisposeBagProvider : Mbark.Deallocatable {
  var bag: Mbark.DisposeBag { get }
}
extension DisposeBagProvider {
  public var deallocated: Mbark.SafeSignal<Swift.Void> {
    get
  }
}
extension NSObject : Mbark.DisposeBagProvider {
  public var bag: Mbark.DisposeBag {
    get
  }
}
public protocol LoadingStateProtocol {
  associatedtype LoadingValue
  associatedtype LoadingError : Swift.Error
  var asLoadingState: Mbark.LoadingState<Self.LoadingValue, Self.LoadingError> { get }
}
extension LoadingStateProtocol {
  public var isLoading: Swift.Bool {
    get
  }
  public var value: Self.LoadingValue? {
    get
  }
  public var error: Self.LoadingError? {
    get
  }
}
public enum LoadingState<LoadingValue, LoadingError> : Mbark.LoadingStateProtocol where LoadingError : Swift.Error {
  case loading
  case loaded(LoadingValue)
  case failed(LoadingError)
  public var asLoadingState: Mbark.LoadingState<LoadingValue, LoadingError> {
    get
  }
}
public protocol ObservedLoadingStateProtocol : Mbark.LoadingStateProtocol {
  var asObservedLoadingState: Mbark.ObservedLoadingState<Self.LoadingValue, Self.LoadingError> { get }
}
extension ObservedLoadingStateProtocol {
  public var isReloading: Swift.Bool {
    get
  }
}
public enum ObservedLoadingState<LoadingValue, LoadingError> : Mbark.ObservedLoadingStateProtocol where LoadingError : Swift.Error {
  case loading
  case reloading
  case loaded(LoadingValue)
  case failed(LoadingError)
  public var asLoadingState: Mbark.LoadingState<LoadingValue, LoadingError> {
    get
  }
  public var asObservedLoadingState: Mbark.ObservedLoadingState<LoadingValue, LoadingError> {
    get
  }
}
extension LoadingState {
  public func isSameStateAs<V, E>(_ other: Mbark.LoadingState<V, E>) -> Swift.Bool where E : Swift.Error
}
public typealias LoadingSignal<LoadingValue, LoadingError> = Mbark.SafeSignal<Mbark.LoadingState<LoadingValue, LoadingError>> where LoadingError : Swift.Error
extension SignalProtocol where Self.Element : Mbark.LoadingStateProtocol, Self.Error == Swift.Never {
  public typealias LoadingValue = Self.Element.LoadingValue
  public typealias LoadingError = Self.Element.LoadingError
  public static func loading() -> Mbark.LoadingSignal<Self.LoadingValue, Self.LoadingError>
  public static func loaded(_ value: Self.LoadingValue) -> Mbark.LoadingSignal<Self.LoadingValue, Self.LoadingError>
  public static func failed(_ error: Self.LoadingError) -> Mbark.LoadingSignal<Self.LoadingValue, Self.LoadingError>
  public func value() -> Mbark.SafeSignal<Self.LoadingValue>
  public func mapValue<NewValue>(_ transform: @escaping (Self.LoadingValue) -> NewValue) -> Mbark.LoadingSignal<NewValue, Self.LoadingError>
  public func mapLoadingError<NewError>(_ transform: @escaping (Self.LoadingError) -> NewError) -> Mbark.LoadingSignal<Self.LoadingValue, NewError> where NewError : Swift.Error
  public func dematerializeLoadingState() -> Mbark.Signal<Self.LoadingValue, Self.LoadingError>
  public func liftValue<T>(_ transfrom: @escaping (Mbark.Signal<Self.LoadingValue, Self.LoadingError>) -> Mbark.Signal<T, Self.LoadingError>) -> Mbark.LoadingSignal<T, Self.LoadingError>
  public func liftValue<T>(_ transfrom: @escaping (Mbark.Signal<Self.LoadingValue, Self.LoadingError>) -> Mbark.LoadingSignal<T, Self.LoadingError>) -> Mbark.LoadingSignal<T, Self.LoadingError>
  public func flatMapValue<NewValue>(_ strategy: Mbark.FlattenStrategy = .latest, transfrom: @escaping (Self.LoadingValue) -> Mbark.LoadingSignal<NewValue, Self.LoadingError>) -> Mbark.LoadingSignal<NewValue, Self.LoadingError>
  public func flatMapValue<NewValue>(_ strategy: Mbark.FlattenStrategy = .latest, transfrom: @escaping (Self.LoadingValue) -> Mbark.Signal<NewValue, Self.LoadingError>) -> Mbark.LoadingSignal<NewValue, Self.LoadingError>
  public func deriveObservedLoadingState(loadsAgainOnFailure: Swift.Bool = true) -> Mbark.Signal<Mbark.ObservedLoadingState<Self.LoadingValue, Self.LoadingError>, Swift.Never>
}
extension SignalProtocol {
  public func toLoadingSignal() -> Mbark.LoadingSignal<Self.Element, Self.Error>
}
public protocol LoadingStateListener : AnyObject {
  func setLoadingState<LoadingValue, LoadingError>(_ state: Mbark.ObservedLoadingState<LoadingValue, LoadingError>) where LoadingError : Swift.Error
  var loadingStateListenerNeedsWeakReference: Swift.Bool { get }
}
extension LoadingStateListener {
  public var loadingStateListenerNeedsWeakReference: Swift.Bool {
    get
  }
}
extension SignalProtocol where Self.Element : Mbark.ObservedLoadingStateProtocol, Self.Error == Swift.Never {
  public func updateLoadingState(of listener: Mbark.BindingExecutionContextProvider & Mbark.LoadingStateListener) -> Mbark.Signal<Mbark.ObservedLoadingState<Self.LoadingValue, Self.LoadingError>, Swift.Never>
  public func updateLoadingState(of listener: Mbark.LoadingStateListener, context: Mbark.ExecutionContext) -> Mbark.Signal<Mbark.ObservedLoadingState<Self.LoadingValue, Self.LoadingError>, Swift.Never>
  public func consumeLoadingState(by listener: Mbark.BindingExecutionContextProvider & Mbark.LoadingStateListener) -> Mbark.SafeSignal<Self.LoadingValue>
  public func consumeLoadingState(by listener: Mbark.LoadingStateListener, context: Mbark.ExecutionContext) -> Mbark.SafeSignal<Self.LoadingValue>
}
extension SignalProtocol where Self.Element : Mbark.LoadingStateProtocol, Self.Error == Swift.Never {
  public func updateLoadingState(of listener: Mbark.BindingExecutionContextProvider & Mbark.LoadingStateListener) -> Mbark.LoadingSignal<Self.LoadingValue, Self.LoadingError>
  public func updateLoadingState(of listener: Mbark.LoadingStateListener, context: Mbark.ExecutionContext) -> Mbark.LoadingSignal<Self.LoadingValue, Self.LoadingError>
  public func consumeLoadingState(by listener: Mbark.BindingExecutionContextProvider & Mbark.LoadingStateListener) -> Mbark.SafeSignal<Self.LoadingValue>
  public func consumeLoadingState(by listener: Mbark.LoadingStateListener, context: Mbark.ExecutionContext) -> Mbark.SafeSignal<Self.LoadingValue>
}
public struct Safe<Base> : Swift.Decodable where Base : Swift.Decodable {
  public let value: Base?
  public init(from decoder: Swift.Decoder) throws
}
public class Configurator {
  public init(name: Swift.String = "")
  public var name: Swift.String
  public func configure(_ id: Swift.String? = nil)
  @objc deinit
}
extension UILabel {
  @objc dynamic open func mbark_display(font: UIKit.UIFont?)
}
extension UITextField {
  @objc dynamic open func mbark_display(font: UIKit.UIFont?)
}
public protocol MbarkHandler : AnyObject, Swift.Hashable {
  associatedtype Handler
  var id: Swift.String { get }
  var handle: Self.Handler { get }
  var finish: ((Swift.Bool) -> Swift.Void)? { get set }
  func onFinish(_ callback: @escaping (Swift.Bool) -> Swift.Void) -> Self
  func finish(success: Swift.Bool)
}
extension MbarkHandler {
  public func hash(into hasher: inout Swift.Hasher)
  @discardableResult
  public func onFinish(_ callback: @escaping (Swift.Bool) -> Swift.Void) -> Self
  public func finish(success: Swift.Bool)
}
extension EffectsVertex {
  public init(position: (Swift.Float, Swift.Float, Swift.Float, Swift.Float), textureCoordinate: (Swift.Float, Swift.Float))
}
extension EffectsVertex : Swift.Equatable {
  public static func == (lhs: Mbark.EffectsVertex, rhs: Mbark.EffectsVertex) -> Swift.Bool
}
extension EffectsVertex : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension EffectsVertices {
  convenience public init(vertices: [Mbark.EffectsVertex], primitiveType: Metal.MTLPrimitiveType)
  convenience public init(vertexBuffer: Mbark.EffectsDataBuffer, vertexCount: Swift.Int, indexBuffer: Mbark.EffectsDataBuffer?, indexCount: Swift.Int?, primitiveType: Metal.MTLPrimitiveType)
}
extension EffectsDataBuffer {
  convenience public init?(EffectsVertices: [Mbark.EffectsVertex])
  convenience public init?(uint32Indexes: [Swift.UInt32])
}
public enum TimelaneLaneType : Swift.Int, Swift.CaseIterable {
  case subscription, event
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Mbark.TimelaneLaneType]
  public typealias RawValue = Swift.Int
  public static var allCases: [Mbark.TimelaneLaneType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension SignalProtocol {
  public func laneIfAvailable(_ name: Swift.String, filter: Swift.Set<Mbark.TimelaneLaneType> = Set(TimelaneLaneType.allCases), file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line) -> Mbark.Signal<Self.Element, Self.Error>
  @available(macOS 10.14, iOS 12, tvOS 12, watchOS 5, *)
  public func lane(_ name: Swift.String, filter: Swift.Set<Mbark.TimelaneLaneType> = Set(TimelaneLaneType.allCases), file: Swift.StaticString = #file, function: Swift.StaticString = #function, line: Swift.UInt = #line) -> Mbark.Signal<Self.Element, Self.Error>
}
public enum MbarkEventType : Swift.String {
  case accept
  case authenticate
  case background
  case foreground
  case flowStart
  case flowEnd
  case input
  case longPress
  case reject
  case swipeLeft
  case swipeRight
  case tap
  case view
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum MbarkStepNames : Swift.String {
  case loading
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum AuthenticationUserType : Swift.String {
  case new
  case existing
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol Scheduler {
  func schedule(_ action: @escaping () -> Swift.Void)
}
extension ExecutionContext : Mbark.Scheduler {
  public func schedule(_ action: @escaping () -> Swift.Void)
}
extension DispatchQueue : Mbark.Scheduler {
  public func schedule(_ action: @escaping () -> Swift.Void)
}
@_inheritsConvenienceInitializers @objc(EffectsSIMDArgumentEncoder) public class EffectsSIMDArgumentEncoder : ObjectiveC.NSObject, Mbark.EffectsFunctionArgumentEncoding {
  public enum Error : Swift.String, Swift.Error, Foundation.LocalizedError {
    case argumentTypeMismatch
    public var errorDescription: Swift.String? {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc public static func encodeValue(_ value: Any, argument: Metal.MTLArgument, proxy: Mbark.EffectsFunctionArgumentEncodingProxy) throws
  @objc override dynamic public init()
  @objc deinit
}
public protocol KeyValueCodingType {
  func value(forKey k: Swift.String) -> Any?
}
extension KeyValueCodingType {
  public func value(forKey k: Swift.String) -> Any?
}
public struct KeyValueCoding {
  public static func value(forKeyPath p: Swift.String, inObject o: Any?) -> Any?
  public static func value(forKey k: Swift.String, inObject o: Any?) -> Any?
  public static func defaultValue(forKey k: Swift.String, inObject o: Any?) -> Any?
}
extension KeyValueCoding {
  public static func defaultValue(forKey k: Swift.String, inDictionary o: Any, mirror: Swift.Mirror) -> Any?
}
@objc @_hasMissingDesignatedInitializers public class GridView : UIKit.UIView {
  public init(frame: CoreGraphics.CGRect, columns: Swift.Int, rows: Swift.Int, padding: CoreGraphics.CGFloat)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public protocol Subscriber {
  associatedtype Input
  associatedtype Failure : Swift.Error
  func receive(subscription: Mbark.Subscription)
  func receive(_ input: Self.Input) -> Mbark.Subscribers.Demand
  func receive(completion: Mbark.Subscribers.Completion<Self.Failure>)
}
extension Subscriber where Self.Input == Swift.Void {
  public func receive() -> Mbark.Subscribers.Demand
}
public protocol Cancellable {
  func cancel()
}
extension EffectsRGBColorSpaceConversionFilter {
  public static func convert(_ image: Mbark.EffectsImage, from inputColorSpace: Mbark.EffectsRGBColorSpace, to outputColorSpace: Mbark.EffectsRGBColorSpace, alphaType: Mbark.EffectsAlphaType, pixelFormat: Metal.MTLPixelFormat = .unspecified) -> Mbark.EffectsImage
}
extension UIViewController {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
public protocol ConnectableSignalProtocol : Mbark.SignalProtocol {
  func connect() -> Mbark.Disposable
}
final public class ConnectableSignal<Source> : Mbark.ConnectableSignalProtocol where Source : Mbark.SignalProtocol {
  public init(source: Source, subject: Mbark.Subject<Source.Element, Source.Error>)
  final public func connect() -> Mbark.Disposable
  final public func observe(with observer: @escaping (Mbark.Signal<Source.Element, Source.Error>.Event) -> Swift.Void) -> Mbark.Disposable
  public typealias Element = Source.Element
  public typealias Error = Source.Error
  @objc deinit
}
extension ConnectableSignalProtocol {
  public func refCount(disconnectCount: Swift.Int = 0) -> Mbark.Signal<Self.Element, Self.Error>
}
extension SignalProtocol {
  public func multicast(_ createSubject: () -> Mbark.Subject<Self.Element, Self.Error>) -> Mbark.ConnectableSignal<Self>
  public func multicast(subject: Mbark.Subject<Self.Element, Self.Error>) -> Mbark.ConnectableSignal<Self>
  public func replay(limit: Swift.Int = Int.max) -> Mbark.ConnectableSignal<Self>
  public func publish() -> Mbark.ConnectableSignal<Self>
  public func share(limit: Swift.Int = Int.max, keepAlive: Swift.Bool = false) -> Mbark.Signal<Self.Element, Self.Error>
}
extension SignalProtocol where Self.Element : Mbark.LoadingStateProtocol {
  public func replayValues(limit: Swift.Int = Int.max) -> Mbark.ConnectableSignal<Mbark.Signal<Mbark.LoadingState<Self.Element.LoadingValue, Self.Element.LoadingError>, Self.Error>>
  public func shareReplayValues(limit: Swift.Int = Int.max) -> Mbark.Signal<Mbark.LoadingState<Self.Element.LoadingValue, Self.Element.LoadingError>, Self.Error>
}
final public class EffectsDisplacementTransition {
  @discardableResult
  public init(from image: Mbark.EffectsImage, to targetImage: Mbark.EffectsImage, displacementMap displacement: Mbark.EffectsImage, options: Mbark.EffectsDisplacementTransition.Options, updater: @escaping (Mbark.EffectsImage) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_inheritsConvenienceInitializers final public class Filter : ObjectiveC.NSObject, Mbark.EffectsFilter {
    @objc final public var outputPixelFormat: Metal.MTLPixelFormat
    final public var inputImage: Mbark.EffectsImage?
    final public var inputTargetImage: Mbark.EffectsImage?
    final public var inputDisplacementImage: Mbark.EffectsImage?
    final public var displacementIntensity: Swift.Float
    final public var angle: Swift.Float
    final public var progress: Swift.Float
    @objc final public var outputImage: Mbark.EffectsImage? {
      @objc get
    }
    @objc override dynamic public init()
    @objc deinit
  }
  public struct Options {
    public var angle: Swift.Float
    public var displacementIntensity: Swift.Float
    public var duration: Swift.Double
    public var timingFunction: (Swift.Float) -> Swift.Float
    public init()
  }
  final public func cancel()
  @objc deinit
}
final public class CGImageDisplacementTransition {
  @discardableResult
  public init(from image: CoreGraphics.CGImage, to targetImage: CoreGraphics.CGImage, displacementMap displacement: CoreGraphics.CGImage, options: Mbark.EffectsDisplacementTransition.Options, updater: @escaping (CoreGraphics.CGImage) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?) throws
  public enum Error : Swift.Error {
    case noMetalDeviceFound
    public static func == (a: Mbark.CGImageDisplacementTransition.Error, b: Mbark.CGImageDisplacementTransition.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @discardableResult
  public static func transition(from image: CoreGraphics.CGImage, to targetImage: CoreGraphics.CGImage, displacementMap displacement: CoreGraphics.CGImage, options: Mbark.EffectsDisplacementTransition.Options, updater: @escaping (CoreGraphics.CGImage) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?) throws -> Mbark.CGImageDisplacementTransition
  final public func cancel()
  @objc deinit
}
@objc final public class ViewControllerDisplacementTransition : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  public init(displacementMap displacement: CoreGraphics.CGImage, options: Mbark.EffectsDisplacementTransition.Options)
  @objc final public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc final public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc override dynamic public init()
  @objc deinit
}
extension AttributedMustacheNode {
  public func render(object o: Any?, cb: (Foundation.NSAttributedString) -> Swift.Void)
  public func render(object o: Any?) -> Foundation.NSAttributedString
  public func render(nodes nl: [Mbark.AttributedMustacheNode], inContext ctx: Mbark.AttributedMustacheRenderingContext)
  public func render(inContext ctx: Mbark.AttributedMustacheRenderingContext, cb: (Foundation.NSAttributedString) -> Swift.Void)
  public func render(inContext ctx: Mbark.AttributedMustacheRenderingContext)
  public func render(lambda cb: (Foundation.NSAttributedString, (Foundation.NSAttributedString) -> Foundation.NSAttributedString) -> Foundation.NSAttributedString, nodes nl: [Mbark.AttributedMustacheNode], inContext ctx: Mbark.AttributedMustacheRenderingContext)
  public func render(lambda cb: (Swift.String, (Swift.String) -> Swift.String) -> Swift.String, nodes nl: [Mbark.AttributedMustacheNode], inContext ctx: Mbark.AttributedMustacheRenderingContext)
}
extension AttributedMustacheNode {
  public func render(section tag: Swift.String, nodes: [Mbark.AttributedMustacheNode], inContext ctx: Mbark.AttributedMustacheRenderingContext)
}
extension EffectsTextureDimensions : Swift.Equatable {
  public init(width: Swift.Int, height: Swift.Int, depth: Swift.Int = 1)
  public static func == (lhs: Mbark.EffectsTextureDimensions, rhs: Mbark.EffectsTextureDimensions) -> Swift.Bool
}
extension SignalProtocol {
  public func debounce(for seconds: Swift.Double, queue: Dispatch.DispatchQueue = DispatchQueue(label: "com.mbark.signal.debounce")) -> Mbark.Signal<Self.Element, Self.Error>
  public func removeDuplicates(by areEqual: @escaping (Self.Element, Self.Element) -> Swift.Bool) -> Mbark.Signal<Self.Element, Self.Error>
  public func output(at index: Swift.Int) -> Mbark.Signal<Self.Element, Self.Error>
  public func filter(_ isIncluded: @escaping (Self.Element) -> Swift.Bool) -> Mbark.Signal<Self.Element, Self.Error>
  public func flatMapFilter(_ strategy: Mbark.FlattenStrategy = .concat, _ isIncluded: @escaping (Self.Element) -> Mbark.SafeSignal<Swift.Bool>) -> Mbark.Signal<Self.Element, Self.Error>
  public func first() -> Mbark.Signal<Self.Element, Self.Error>
  public func ignoreOutput() -> Mbark.Signal<Self.Element, Self.Error>
  public func ignoreTerminal() -> Mbark.Signal<Self.Element, Self.Error>
  public func last() -> Mbark.Signal<Self.Element, Self.Error>
  public func pausable<O>(by other: O) -> Mbark.Signal<Self.Element, Self.Error> where O : Mbark.SignalProtocol, O.Element == Swift.Bool
  public func sample(interval: Swift.Double, on queue: Dispatch.DispatchQueue = DispatchQueue(label: "com.mbark.signal.sample")) -> Mbark.Signal<Self.Element, Self.Error>
  public func dropFirst(_ count: Swift.Int) -> Mbark.Signal<Self.Element, Self.Error>
  public func dropLast(_ count: Swift.Int) -> Mbark.Signal<Self.Element, Self.Error>
  public func dropFirst(for seconds: Swift.Double) -> Mbark.Signal<Self.Element, Self.Error>
  public func prefix(maxLength: Swift.Int) -> Mbark.Signal<Self.Element, Self.Error>
  public func suffix(maxLength: Swift.Int) -> Mbark.Signal<Self.Element, Self.Error>
  public func prefix(while shouldContinue: @escaping (Self.Element) -> Swift.Bool, inclusive: Swift.Bool = false) -> Mbark.Signal<Self.Element, Self.Error>
  public func prefix<S>(untilOutputFrom signal: S) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SignalProtocol
  public func throttle(for seconds: Swift.Double) -> Mbark.Signal<Self.Element, Self.Error>
}
extension SignalProtocol where Self.Element : Swift.Equatable {
  public func removeDuplicates() -> Mbark.Signal<Self.Element, Self.Error>
}
extension SignalProtocol {
  public func compactMap<NewWrapped>(_ transform: @escaping (Self.Element) -> NewWrapped?) -> Mbark.Signal<NewWrapped, Self.Error>
}
extension SignalProtocol where Self.Element : Mbark.OptionalProtocol {
  public func mapWrapped<NewWrapped>(_ transform: @escaping (Self.Element.Wrapped) -> NewWrapped) -> Mbark.Signal<NewWrapped?, Self.Error>
  public func replaceNils(with replacement: Self.Element.Wrapped) -> Mbark.Signal<Self.Element.Wrapped, Self.Error>
  public func ignoreNils() -> Mbark.Signal<Self.Element.Wrapped, Self.Error>
}
public protocol OptionalProtocol {
  associatedtype Wrapped
  var _unbox: Swift.Optional<Self.Wrapped> { get }
  init(nilLiteral: ())
  init(_ some: Self.Wrapped)
}
extension Optional : Mbark.OptionalProtocol {
  public var _unbox: Swift.Optional<Wrapped> {
    get
  }
}
public protocol Disposable : Mbark.Cancellable {
  func dispose()
  var isDisposed: Swift.Bool { get }
}
extension Disposable {
  public func cancel()
}
public struct NonDisposable : Mbark.Disposable {
  public static let instance: Mbark.NonDisposable
  public func dispose()
  public var isDisposed: Swift.Bool {
    get
  }
}
final public class SimpleDisposable : Mbark.Disposable {
  public init(isDisposed: Swift.Bool = false)
  final public var isDisposed: Swift.Bool {
    get
    set
  }
  final public func dispose()
  @objc deinit
}
final public class BlockDisposable : Mbark.Disposable {
  public init(_ handler: @escaping () -> Swift.Void)
  final public var isDisposed: Swift.Bool {
    get
  }
  final public func dispose()
  @objc deinit
}
final public class DeinitDisposable : Mbark.Disposable {
  public init(disposable: Mbark.Disposable)
  @objc deinit
  final public var otherDisposable: Mbark.Disposable? {
    get
    set
  }
  final public var isDisposed: Swift.Bool {
    get
  }
  final public func dispose()
}
final public class CompositeDisposable : Mbark.Disposable {
  public init()
  public init(_ disposables: [Mbark.Disposable])
  final public var isDisposed: Swift.Bool {
    get
  }
  public static func += (left: Mbark.CompositeDisposable, right: Mbark.Disposable)
  final public func add(disposable: Mbark.Disposable)
  final public func dispose()
  @objc deinit
}
final public class SerialDisposable : Mbark.Disposable {
  public init(otherDisposable: Mbark.Disposable?)
  final public var isDisposed: Swift.Bool {
    get
  }
  final public var otherDisposable: Mbark.Disposable? {
    get
    set
  }
  final public func dispose()
  @objc deinit
}
public protocol DisposeBagProtocol : Mbark.Disposable {
  func add(disposable: Mbark.Disposable)
}
final public class DisposeBag : Mbark.DisposeBagProtocol {
  public init()
  @objc deinit
  final public var isDisposed: Swift.Bool {
    get
  }
  final public var deallocated: Mbark.SafeSignal<Swift.Void> {
    get
  }
  public static func += (left: Mbark.DisposeBag, right: Mbark.Disposable)
  public static func += (left: Mbark.DisposeBag, right: [Mbark.Disposable])
  final public func add(disposable: Mbark.Disposable)
  final public func add(disposables: [Mbark.Disposable])
  final public func dispose()
}
final public class AnyCancellable : Mbark.Disposable {
  public init(_ handler: @escaping () -> Swift.Void)
  @objc deinit
  final public var isDisposed: Swift.Bool {
    get
  }
  final public func dispose()
}
extension AnyCancellable : Swift.Hashable {
  public static func == (lhs: Mbark.AnyCancellable, rhs: Mbark.AnyCancellable) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
extension AnyCancellable {
  convenience public init(_ disposable: Mbark.Disposable)
  final public func store<C>(in collection: inout C) where C : Swift.RangeReplaceableCollection, C.Element == Mbark.AnyCancellable
  final public func store(in set: inout Swift.Set<Mbark.AnyCancellable>)
}
extension Disposable {
  public func dispose(in disposeBag: Mbark.DisposeBagProtocol)
  public func store(in disposeBag: Mbark.DisposeBagProtocol)
  public func store<C>(in collection: inout C) where C : Swift.RangeReplaceableCollection, C.Element == Mbark.AnyCancellable
  public func store(in set: inout Swift.Set<Mbark.AnyCancellable>)
}
public func combineLatest<A, B, Result>(_ a: A, _ b: B, combine: @escaping (A.Element, B.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, A.Error == B.Error
public func combineLatest<A, B, C, Result>(_ a: A, _ b: B, _ c: C, combine: @escaping (A.Element, B.Element, C.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error
public func combineLatest<A, B, C, D, Result>(_ a: A, _ b: B, _ c: C, _ d: D, combine: @escaping (A.Element, B.Element, C.Element, D.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error
public func combineLatest<A, B, C, D, E, Result>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, combine: @escaping (A.Element, B.Element, C.Element, D.Element, E.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error
public func combineLatest<A, B, C, D, E, F, Result>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, _ f: F, combine: @escaping (A.Element, B.Element, C.Element, D.Element, E.Element, F.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, F : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error, E.Error == F.Error
public func combineLatest<A, B>(_ a: A, _ b: B) -> Mbark.Signal<(A.Element, B.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, A.Error == B.Error
public func combineLatest<A, B, C>(_ a: A, _ b: B, _ c: C) -> Mbark.Signal<(A.Element, B.Element, C.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error
public func combineLatest<A, B, C, D>(_ a: A, _ b: B, _ c: C, _ d: D) -> Mbark.Signal<(A.Element, B.Element, C.Element, D.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error
public func combineLatest<A, B, C, D, E>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E) -> Mbark.Signal<(A.Element, B.Element, C.Element, D.Element, E.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error
public func combineLatest<A, B, C, D, E, F>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, _ f: F) -> Mbark.Signal<(A.Element, B.Element, C.Element, D.Element, E.Element, F.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, F : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error, E.Error == F.Error
public func zip<A, B, Result>(_ a: A, _ b: B, combine: @escaping (A.Element, B.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, A.Error == B.Error
public func zip<A, B, C, Result>(_ a: A, _ b: B, _ c: C, combine: @escaping (A.Element, B.Element, C.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error
public func zip<A, B, C, D, Result>(_ a: A, _ b: B, _ c: C, _ d: D, combine: @escaping (A.Element, B.Element, C.Element, D.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error
public func zip<A, B, C, D, E, Result>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, combine: @escaping (A.Element, B.Element, C.Element, D.Element, E.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error
public func zip<A, B, C, D, E, F, Result>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, _ f: F, combine: @escaping (A.Element, B.Element, C.Element, D.Element, E.Element, F.Element) -> Result) -> Mbark.Signal<Result, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, F : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error, E.Error == F.Error
public func zip<A, B>(_ a: A, _ b: B) -> Mbark.Signal<(A.Element, B.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, A.Error == B.Error
public func zip<A, B, C>(_ a: A, _ b: B, _ c: C) -> Mbark.Signal<(A.Element, B.Element, C.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error
public func zip<A, B, C, D>(_ a: A, _ b: B, _ c: C, _ d: D) -> Mbark.Signal<(A.Element, B.Element, C.Element, D.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error
public func zip<A, B, C, D, E>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E) -> Mbark.Signal<(A.Element, B.Element, C.Element, D.Element, E.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error
public func zip<A, B, C, D, E, F>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, _ f: F) -> Mbark.Signal<(A.Element, B.Element, C.Element, D.Element, E.Element, F.Element), A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, F : Mbark.SignalProtocol, A.Error == B.Error, B.Error == C.Error, C.Error == D.Error, D.Error == E.Error, E.Error == F.Error
public func merge<A, B>(_ a: A, _ b: B) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error
public func merge<A, B, C>(_ a: A, _ b: B, _ c: C) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error
public func merge<A, B, C, D>(_ a: A, _ b: B, _ c: C, _ d: D) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error, C.Element == D.Element, C.Error == D.Error
public func merge<A, B, C, D, E>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error, C.Element == D.Element, C.Error == D.Error, D.Element == E.Element, D.Error == E.Error
public func merge<A, B, C, D, E, F>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, _ f: F) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, F : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error, C.Element == D.Element, C.Error == D.Error, D.Element == E.Element, D.Error == E.Error, E.Element == F.Element, E.Error == F.Error
public func amb<A, B>(_ a: A, _ b: B) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error
public func amb<A, B, C>(_ a: A, _ b: B, _ c: C) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error
public func amb<A, B, C, D>(_ a: A, _ b: B, _ c: C, _ d: D) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error, C.Element == D.Element, C.Error == D.Error
public func amb<A, B, C, D, E>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error, C.Element == D.Element, C.Error == D.Error, D.Element == E.Element, D.Error == E.Error
public func amb<A, B, C, D, E, F>(_ a: A, _ b: B, _ c: C, _ d: D, _ e: E, _ f: F) -> Mbark.Signal<A.Element, A.Error> where A : Mbark.SignalProtocol, B : Mbark.SignalProtocol, C : Mbark.SignalProtocol, D : Mbark.SignalProtocol, E : Mbark.SignalProtocol, F : Mbark.SignalProtocol, A.Element == B.Element, A.Error == B.Error, B.Element == C.Element, B.Error == C.Error, C.Element == D.Element, C.Error == D.Error, D.Element == E.Element, D.Error == E.Error, E.Element == F.Element, E.Error == F.Error
public struct Signal<Element, Error> : Mbark.SignalProtocol where Error : Swift.Error {
  public typealias Producer = (Mbark.AtomicObserver<Element, Error>) -> Mbark.Disposable
  public init(_ producer: @escaping Mbark.Signal<Element, Error>.Producer)
  public func observe(with observer: @escaping Mbark.Observer<Element, Error>) -> Mbark.Disposable
}
public typealias SafeSignal<Element> = Mbark.Signal<Element, Swift.Never>
extension Signal {
  public static func completed() -> Mbark.Signal<Element, Error>
  public static func failed(_ error: Error) -> Mbark.Signal<Element, Error>
  public static func never() -> Mbark.Signal<Element, Error>
  public static func withObserver() -> (Mbark.Signal<Element, Error>, Mbark.AnyObserver<Element, Error>)
}
extension Signal {
  public init(just element: Element)
  public init(just element: Element, after interval: Swift.Double, queue: Dispatch.DispatchQueue = DispatchQueue(label: "com.mbark.signal.just_after"))
  public init(performing body: @escaping () -> Element)
  public init(result: Swift.Result<Element, Error>)
  public init<Other>(deferring makeSignal: @escaping () -> Other) where Element == Other.Element, Error == Other.Error, Other : Mbark.SignalProtocol
  public init(evaluating body: @escaping () -> Swift.Result<Element, Error>)
  public init<S>(sequence: S) where Element == S.Element, S : Swift.Sequence
  public init<S>(sequence: S, interval: Swift.Double, queue: Dispatch.DispatchQueue = DispatchQueue(label: "com.mbark.signal.sequence")) where Element == S.Element, S : Swift.Sequence
  public init<S>(flattening signals: S, strategy: Mbark.FlattenStrategy) where Element == S.Element.Element, Error == S.Element.Error, S : Swift.Sequence, S.Element : Mbark.SignalProtocol
  public init<S>(combiningLatest signals: S, combine: @escaping ([S.Element.Element]) -> Element) where Error == S.Element.Error, S : Swift.Collection, S.Element : Mbark.SignalProtocol
}
extension Signal where Error == Swift.Error {
  public init(catching body: @escaping () throws -> Element)
}
public protocol Subscription : Mbark.Cancellable {
  func request(_ demand: Mbark.Subscribers.Demand)
}
extension MustacheNode {
  public func render(object o: Any?, cb: (Swift.String) -> Swift.Void)
  public func render(object o: Any?) -> Swift.String
  public func render(nodes nl: [Mbark.MustacheNode], inContext ctx: Mbark.MustacheRenderingContext)
  public func render(inContext ctx: Mbark.MustacheRenderingContext, cb: (Swift.String) -> Swift.Void)
  public func render(inContext ctx: Mbark.MustacheRenderingContext)
  public func render(lambda cb: (Swift.String, (Swift.String) -> Swift.String) -> Swift.String, nodes nl: [Mbark.MustacheNode], inContext ctx: Mbark.MustacheRenderingContext)
}
extension MustacheNode {
  public func render(section tag: Swift.String, nodes: [Mbark.MustacheNode], inContext ctx: Mbark.MustacheRenderingContext)
}
extension EffectsCornerRadius : Swift.Equatable {
  public static func == (lhs: Mbark.EffectsCornerRadius, rhs: Mbark.EffectsCornerRadius) -> Swift.Bool
}
extension EffectsCornerRadius : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class MbarkPurchaseActionHandler : Mbark.MbarkHandler {
  public typealias Handler = (Swift.String) -> Swift.Void
  public var finish: ((Swift.Bool) -> Swift.Void)?
  public init(id: Swift.String, handler: @escaping Mbark.MbarkPurchaseActionHandler.Handler)
  final public let id: Swift.String
  final public let handle: Mbark.MbarkPurchaseActionHandler.Handler
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
extension MbarkPurchaseActionHandler : Swift.Equatable {
  public static func == (lhs: Mbark.MbarkPurchaseActionHandler, rhs: Mbark.MbarkPurchaseActionHandler) -> Swift.Bool
}
extension UIWindow {
  public var visibleViewController: UIKit.UIViewController? {
    get
  }
  public static func visibleViewController(from viewController: UIKit.UIViewController?) -> UIKit.UIViewController?
}
extension EffectsAlphaTypeHandlingRule {
  convenience public init(acceptableAlphaTypes: [Mbark.EffectsAlphaType], outputAlphaType: Mbark.EffectsAlphaType)
  convenience public init(acceptableAlphaTypes: [Mbark.EffectsAlphaType], _ handler: @escaping ([Mbark.EffectsAlphaType]) -> Mbark.EffectsAlphaType)
  convenience public init(_ handler: @escaping ([Mbark.EffectsAlphaType]) -> Mbark.EffectsAlphaType)
  public var acceptableAlphaTypes: [Mbark.EffectsAlphaType] {
    get
  }
  public func outputAlphaType(forInputAlphaTypes inputAlphaTypes: [Mbark.EffectsAlphaType]) -> Mbark.EffectsAlphaType
}
extension EffectsAlphaType : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension MustacheRenderingContext {
  public func escape(string s: Swift.String) -> Swift.String
}
public struct ExecutionContext {
  public init(_ context: @escaping (@escaping () -> Swift.Void) -> Swift.Void)
  public static var immediate: Mbark.ExecutionContext {
    get
  }
  public static var immediateOnMain: Mbark.ExecutionContext {
    get
  }
  public static var main: Mbark.ExecutionContext {
    get
  }
  public let context: (@escaping () -> Swift.Void) -> Swift.Void
  @available(macOS 10.10, *)
  public static func global(qos: Dispatch.DispatchQoS.QoSClass = .default) -> Mbark.ExecutionContext
  public static func nonRecursive() -> Mbark.ExecutionContext
  public func execute(_ block: @escaping () -> Swift.Void)
}
extension DispatchQueue {
  public var context: Mbark.ExecutionContext {
    get
  }
  @available(*, deprecated, message: "Please use asyncAfter(deadline:execute:)")
  public func after(when interval: Swift.Double, block: @escaping () -> Swift.Void)
  public func disposableAfter(when interval: Swift.Double, block: @escaping () -> Swift.Void) -> Mbark.Disposable
}
extension EffectsContext {
  public func startTaskToCreateCGImage(from image: Mbark.EffectsImage, colorSpace: CoreGraphics.CGColorSpace? = nil, completion: ((Mbark.EffectsRenderTask) -> Swift.Void)? = nil) throws -> (image: CoreGraphics.CGImage, task: Mbark.EffectsRenderTask)
}
@_hasMissingDesignatedInitializers public class MbarkInstance : Swift.CustomDebugStringConvertible {
  @objc deinit
  public var actionHandlers: Swift.Set<Mbark.MbarkActionHandler> {
    get
  }
  public var purchaseActionHandler: Mbark.MbarkPurchaseActionHandler? {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public func trackOnce(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public func track(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
}
extension EffectsCropRegion {
  public static func pixel(_ rect: CoreGraphics.CGRect) -> Mbark.EffectsCropRegion
  public static func fractional(_ rect: CoreGraphics.CGRect) -> Mbark.EffectsCropRegion
}
public enum AttributedMustacheNode : Swift.Equatable {
  case empty
  case global([Mbark.AttributedMustacheNode])
  case text(Foundation.NSAttributedString)
  case section(Swift.String, [Mbark.AttributedMustacheNode])
  case invertedSection(Swift.String, [Mbark.AttributedMustacheNode])
  case tag(Foundation.NSAttributedString)
  case unescapedTag(Foundation.NSAttributedString)
  case partial(Swift.String)
  public static func == (a: Mbark.AttributedMustacheNode, b: Mbark.AttributedMustacheNode) -> Swift.Bool
}
extension AttributedMustacheNode {
  public var asMustacheString: Swift.String {
    get
  }
  public var asMustacheAttributedString: Foundation.NSAttributedString {
    get
  }
}
extension AttributedMustacheNode {
  public func append(toString s: inout Swift.String)
  public func append(toAttributedString s: Foundation.NSMutableAttributedString)
}
extension Sequence where Self.Element == Mbark.AttributedMustacheNode {
  public var asMustacheString: Swift.String {
    get
  }
  public var asMustacheAttributedString: Foundation.NSAttributedString {
    get
  }
}
extension AttributedMustacheNode {
  public var hasKeys: Swift.Bool {
    get
  }
  public var keys: Swift.Set<Swift.String> {
    get
  }
}
extension Sequence where Self.Element == Mbark.AttributedMustacheNode {
  public var keys: Swift.Set<Swift.String> {
    get
  }
}
extension Collection where Self.Element == Mbark.AttributedMustacheNode {
  public var keys: Swift.Set<Swift.String> {
    get
  }
}
public enum Subscribers {
  public enum Completion<Failure> where Failure : Swift.Error {
    case finished
    case failure(Failure)
  }
}
extension EffectsDataBuffer {
  convenience public init?<T>(values: [T], options: Metal.MTLResourceOptions = [])
  public func unsafeAccess<ReturnType, BufferContentType>(_ block: (Swift.UnsafeMutableBufferPointer<BufferContentType>) throws -> ReturnType) rethrows -> ReturnType
}
public typealias MustacheRenderingFunction = (Swift.String, (Swift.String) -> Swift.String) -> Swift.String
public typealias MustacheSimpleRenderingFunction = (Swift.String) -> Swift.String
public protocol MustacheRenderingContext {
  var string: Swift.String { get }
  func append(string s: Swift.String)
  var cursor: Any? { get }
  func enter(scope ctx: Any?)
  func leave()
  func value(forTag tag: Swift.String) -> Any?
  func newLambdaContext() -> Mbark.MustacheRenderingContext
  func retrievePartial(name n: Swift.String) -> Mbark.MustacheNode?
}
extension MustacheRenderingContext {
  public func value(forTag tag: Swift.String) -> Any?
  public func retrievePartial(name n: Swift.String) -> Mbark.MustacheNode?
}
open class MustacheDefaultRenderingContext : Mbark.MustacheRenderingContext {
  public var string: Swift.String
  public var stack: [Any?]
  public init(_ root: Any?)
  public init(context: Mbark.MustacheDefaultRenderingContext)
  public func append(string s: Swift.String)
  public func enter(scope ctx: Any?)
  public func leave()
  public var cursor: Any? {
    get
  }
  open func value(forTag tag: Swift.String) -> Any?
  open func newLambdaContext() -> Mbark.MustacheRenderingContext
  open func retrievePartial(name n: Swift.String) -> Mbark.MustacheNode?
  @objc deinit
}
extension SignalProtocol {
  public func map<U>(_ transform: @escaping (Self.Element) -> U) -> Mbark.Signal<U, Self.Error>
  public func flatMap<O>(_ strategy: Mbark.FlattenStrategy, _ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func flatMapConcat<O>(_ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func flatMapLatest<O>(_ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func flatMapMerge<O>(_ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, Self.Error> where O : Mbark.SignalProtocol, Self.Error == O.Error
  public func flatMapError<S>(_ recover: @escaping (Self.Error) -> S) -> Mbark.Signal<Self.Element, S.Error> where S : Mbark.SignalProtocol, Self.Element == S.Element
}
extension SignalProtocol where Self.Error == Swift.Error {
  public func map<U>(_ transform: @escaping (Self.Element) throws -> U) -> Mbark.Signal<U, Self.Error>
}
public enum FlattenStrategy {
  case concat
  case latest
  case merge
  public static func == (a: Mbark.FlattenStrategy, b: Mbark.FlattenStrategy) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SignalProtocol where Self.Element : Mbark.SignalProtocol, Self.Error == Self.Element.Error {
  public typealias InnerElement = Self.Element.Element
  public func flatten(_ strategy: Mbark.FlattenStrategy) -> Mbark.Signal<Self.InnerElement, Self.Error>
  public func merge() -> Mbark.Signal<Self.InnerElement, Self.Error>
  public func switchToLatest() -> Mbark.Signal<Self.InnerElement, Self.Error>
  public func concat() -> Mbark.Signal<Self.InnerElement, Self.Error>
}
extension SignalProtocol where Self.Error == Swift.Never {
  public func flatMap<O>(_ strategy: Mbark.FlattenStrategy, _ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, O.Error> where O : Mbark.SignalProtocol
  public func flatMapConcat<O>(_ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, O.Error> where O : Mbark.SignalProtocol
  public func flatMapLatest<O>(_ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, O.Error> where O : Mbark.SignalProtocol
  public func flatMapMerge<O>(_ transform: @escaping (Self.Element) -> O) -> Mbark.Signal<O.Element, O.Error> where O : Mbark.SignalProtocol
}
extension SignalProtocol where Self.Element : Mbark.SignalProtocol, Self.Error == Swift.Never {
  public func flatten(_ strategy: Mbark.FlattenStrategy) -> Mbark.Signal<Self.Element.Element, Self.Element.Error>
}
extension EffectsColorMatrix : Swift.Equatable {
  public static func == (lhs: Mbark.EffectsColorMatrix, rhs: Mbark.EffectsColorMatrix) -> Swift.Bool
}
extension Subscribers {
  public struct Demand : Swift.Equatable, Swift.Hashable {
    public let value: Swift.Int
    public static let unlimited: Mbark.Subscribers.Demand
    @available(*, unavailable, message: "Not supported yet.")
    public static func max(_ value: Swift.Int) -> Mbark.Subscribers.Demand
    public static func == (a: Mbark.Subscribers.Demand, b: Mbark.Subscribers.Demand) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public typealias CGPoint = CoreGraphics.CGPoint
public typealias Observer<Element, Error> = (Mbark.Signal<Element, Error>.Event) -> Swift.Void where Error : Swift.Error
public typealias SafeObserver<Element> = (Mbark.Signal<Element, Swift.Never>.Event) -> Swift.Void
public protocol ObserverProtocol {
  associatedtype Element
  associatedtype Error : Swift.Error
  func on(_ event: Mbark.Signal<Self.Element, Self.Error>.Event)
}
public struct AnyObserver<Element, Error> : Mbark.ObserverProtocol where Error : Swift.Error {
  public let observer: Mbark.Observer<Element, Error>
  public init(observer: @escaping Mbark.Observer<Element, Error>)
  public func on(_ event: Mbark.Signal<Element, Error>.Event)
}
final public class AtomicObserver<Element, Error> : Mbark.ObserverProtocol, Mbark.Disposable where Error : Swift.Error {
  public init(_ observer: @escaping Mbark.Observer<Element, Error>)
  @available(*, deprecated, message: "Will be remove in favour of `init(_:)`. AtomicObserver is a Disposable itself now.")
  convenience public init(disposable: Mbark.Disposable, observer: @escaping Mbark.Observer<Element, Error>)
  final public var isDisposed: Swift.Bool {
    get
  }
  final public func on(_ event: Mbark.Signal<Element, Error>.Event)
  final public func attach(_ producer: (Mbark.AtomicObserver<Element, Error>) -> Mbark.Disposable)
  final public func dispose()
  @objc deinit
}
extension ObserverProtocol {
  public func receive(_ element: Self.Element)
  public func receive(completion: Mbark.Subscribers.Completion<Self.Error>)
  public func receive(lastElement element: Self.Element)
  public func toObserver() -> Mbark.Observer<Self.Element, Self.Error>
}
extension ObserverProtocol where Self.Element == Swift.Void {
  public func receive()
}
final public class EffectsCrossZoomTransition {
  @discardableResult
  public init(from image: Mbark.EffectsImage, to targetImage: Mbark.EffectsImage, options: Mbark.EffectsCrossZoomTransition.Options, updater: @escaping (Mbark.EffectsImage) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?)
  @objc @_inheritsConvenienceInitializers final public class Filter : ObjectiveC.NSObject, Mbark.EffectsFilter {
    @objc final public var outputPixelFormat: Metal.MTLPixelFormat
    final public var inputImage: Mbark.EffectsImage?
    final public var inputTargetImage: Mbark.EffectsImage?
    final public var intensity: Swift.Float
    final public var progress: Swift.Float
    @objc final public var outputImage: Mbark.EffectsImage? {
      @objc get
    }
    @objc override dynamic public init()
    @objc deinit
  }
  public struct Options {
    public var intensity: Swift.Float
    public var duration: Swift.Double
    public var timingFunction: (Swift.Float) -> Swift.Float
    public init()
  }
  final public func cancel()
  @objc deinit
}
final public class CGCrossZoomTransition {
  @discardableResult
  public init(from image: CoreGraphics.CGImage, to targetImage: CoreGraphics.CGImage, options: Mbark.EffectsCrossZoomTransition.Options, updater: @escaping (CoreGraphics.CGImage) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?) throws
  public enum Error : Swift.Error {
    case noMetalDeviceFound
    public static func == (a: Mbark.CGCrossZoomTransition.Error, b: Mbark.CGCrossZoomTransition.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @discardableResult
  public static func transition(from image: CoreGraphics.CGImage, to targetImage: CoreGraphics.CGImage, options: Mbark.EffectsCrossZoomTransition.Options, updater: @escaping (CoreGraphics.CGImage) -> Swift.Void, completion: ((Swift.Bool) -> Swift.Void)?) throws -> Mbark.CGCrossZoomTransition
  final public func cancel()
  @objc deinit
}
@objc final public class ViewControllerCrossZoomTransition : ObjectiveC.NSObject, UIKit.UIViewControllerAnimatedTransitioning {
  public init(options: Mbark.EffectsCrossZoomTransition.Options)
  @objc final public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc final public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @objc override dynamic public init()
  @objc deinit
}
public class LoadingProperty<LoadingValue, LoadingError> : Mbark.PropertyProtocol, Mbark.SignalProtocol, Mbark.DisposeBagProvider where LoadingError : Swift.Error {
  public init(_ signalProducer: @escaping () -> Mbark.LoadingSignal<LoadingValue, LoadingError>)
  public var bag: Mbark.DisposeBag {
    get
  }
  public var loadingState: Mbark.LoadingState<LoadingValue, LoadingError> {
    get
  }
  public var value: LoadingValue? {
    get
    set
  }
  public func reload(silently: Swift.Bool = true) -> Mbark.LoadingSignal<LoadingValue, LoadingError>
  public func observe(with observer: @escaping (Mbark.Signal<Mbark.LoadingState<LoadingValue, LoadingError>, Swift.Never>.Event) -> Swift.Void) -> Mbark.Disposable
  public typealias Element = Mbark.LoadingState<LoadingValue, LoadingError>
  public typealias Error = Swift.Never
  public typealias ProperyElement = LoadingValue?
  @objc deinit
}
extension SignalProtocol {
  public func reloading<LoadingValue>(_ property: Mbark.LoadingProperty<LoadingValue, Self.Error>) -> Mbark.Signal<Self.Element, Self.Error>
}
extension SignalProtocol where Self.Element : Mbark.LoadingStateProtocol, Self.Error == Swift.Never {
  public func reloading<V>(_ property: Mbark.LoadingProperty<V, Self.LoadingError>, strategy: Mbark.FlattenStrategy = .latest) -> Mbark.LoadingSignal<Self.LoadingValue, Self.LoadingError>
}
extension UIButton {
  public func setMbarkId(_ id: Swift.String?, trackEvents: Swift.Bool = true)
}
public enum MustacheNode : Swift.Equatable {
  case empty
  case global([Mbark.MustacheNode])
  case text(Swift.String)
  case section(Swift.String, [Mbark.MustacheNode])
  case invertedSection(Swift.String, [Mbark.MustacheNode])
  case tag(Swift.String)
  case unescapedTag(Swift.String)
  case partial(Swift.String)
  public static func == (a: Mbark.MustacheNode, b: Mbark.MustacheNode) -> Swift.Bool
}
extension MustacheNode {
  public var asMustacheString: Swift.String {
    get
  }
}
extension MustacheNode {
  public func append(toString s: inout Swift.String)
}
extension Sequence where Self.Element == Mbark.MustacheNode {
  public var asMustacheString: Swift.String {
    get
  }
}
extension MustacheNode {
  public var hasKeys: Swift.Bool {
    get
  }
  public var keys: Swift.Set<Swift.String> {
    get
  }
}
extension Sequence where Self.Element == Mbark.MustacheNode {
  public var keys: Swift.Set<Swift.String> {
    get
  }
}
extension Collection where Self.Element == Mbark.MustacheNode {
  public var keys: Swift.Set<Swift.String> {
    get
  }
}
@available(iOS 11.0, macOS 10.13, *)
public struct EffectsCoreImageKernel {
  public enum Error : Swift.Error {
    case failedToCreateCIImage
    case nilOutput
    public static func == (a: Mbark.EffectsCoreImageKernel.Error, b: Mbark.EffectsCoreImageKernel.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func image(byProcessing images: [Mbark.EffectsImage], using filter: @escaping ([CoreImage.CIImage]) throws -> CoreImage.CIImage, colorSpace: CoreGraphics.CGColorSpace? = CGColorSpaceCreateDeviceRGB(), outputDimensions: Mbark.EffectsTextureDimensions, outputPixelFormat: Metal.MTLPixelFormat = .unspecified, outputAlphaType: Mbark.EffectsAlphaType = .nonPremultiplied) -> Mbark.EffectsImage
  public static func image(byProcessing inputImage: Mbark.EffectsImage, using filter: CoreImage.CIFilter, colorSpace: CoreGraphics.CGColorSpace? = CGColorSpaceCreateDeviceRGB(), outputDimensions: Mbark.EffectsTextureDimensions, outputPixelFormat: Metal.MTLPixelFormat = .unspecified, outputAlphaType: Mbark.EffectsAlphaType = .nonPremultiplied) -> Mbark.EffectsImage
}
@available(iOS 11.0, macOS 10.13, *)
final public class EffectsCoreImageUnaryFilter : Mbark.EffectsUnaryFilter {
  public init()
  @objc final public var outputPixelFormat: Metal.MTLPixelFormat
  final public var colorSpace: CoreGraphics.CGColorSpace?
  final public var filter: CoreImage.CIFilter?
  @objc final public var inputImage: Mbark.EffectsImage?
  final public var outputImageSize: CoreGraphics.CGSize?
  final public var outputAlphaType: Mbark.EffectsAlphaType
  @objc final public var outputImage: Mbark.EffectsImage? {
    @objc get
  }
  @objc deinit
}
extension EffectsLayer.FlipOptions : Swift.Hashable {
}
extension EffectsLayer.LayoutUnit : Swift.Hashable {
}
extension EffectsLayer.LayoutUnit : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
public class MultilayerCompositingFilter : Mbark.EffectsFilter {
  public init()
  public struct Layer : Swift.Hashable, Swift.Equatable {
    public init(content: Mbark.EffectsImage)
    public var content: Mbark.EffectsImage
    public var contentRegion: CoreGraphics.CGRect
    public var contentFlipOptions: Mbark.EffectsLayer.FlipOptions
    public var mask: Mbark.EffectsMask?
    public var compositingMask: Mbark.EffectsMask?
    public var layoutUnit: Mbark.EffectsLayer.LayoutUnit
    public var position: Mbark.CGPoint
    public var size: CoreGraphics.CGSize
    public var rotation: Swift.Float
    public var opacity: Swift.Float
    public var cornerRadius: Mbark.EffectsCornerRadius
    public var cornerCurve: Mbark.EffectsCornerCurve
    public var tintColor: Mbark.EffectsColor
    public var blendMode: Mbark.EffectsBlendMode
    public static func content(_ image: Mbark.EffectsImage) -> Mbark.MultilayerCompositingFilter.Layer
    public static func content(_ image: Mbark.EffectsImage, modifier: (inout Mbark.MultilayerCompositingFilter.Layer) -> Swift.Void) -> Mbark.MultilayerCompositingFilter.Layer
    public func hash(into hasher: inout Swift.Hasher)
    public func opacity(_ value: Swift.Float) -> Mbark.MultilayerCompositingFilter.Layer
    public func contentRegion(_ contentRegion: CoreGraphics.CGRect) -> Mbark.MultilayerCompositingFilter.Layer
    public func contentFlipOptions(_ contentFlipOptions: Mbark.EffectsLayer.FlipOptions) -> Mbark.MultilayerCompositingFilter.Layer
    public func mask(_ mask: Mbark.EffectsMask?) -> Mbark.MultilayerCompositingFilter.Layer
    public func compositingMask(_ mask: Mbark.EffectsMask?) -> Mbark.MultilayerCompositingFilter.Layer
    public func frame(_ rect: CoreGraphics.CGRect, layoutUnit: Mbark.EffectsLayer.LayoutUnit) -> Mbark.MultilayerCompositingFilter.Layer
    public func frame(center: Mbark.CGPoint, size: CoreGraphics.CGSize, layoutUnit: Mbark.EffectsLayer.LayoutUnit) -> Mbark.MultilayerCompositingFilter.Layer
    public func rotation(_ rotation: Swift.Float) -> Mbark.MultilayerCompositingFilter.Layer
    public func tintColor(_ color: Mbark.EffectsColor?) -> Mbark.MultilayerCompositingFilter.Layer
    public func blendMode(_ blendMode: Mbark.EffectsBlendMode) -> Mbark.MultilayerCompositingFilter.Layer
    public func corner(radius: Mbark.EffectsCornerRadius, curve: Mbark.EffectsCornerCurve) -> Mbark.MultilayerCompositingFilter.Layer
    public func cornerRadius(_ radius: Mbark.EffectsCornerRadius) -> Mbark.MultilayerCompositingFilter.Layer
    public func cornerRadius(_ radius: Swift.Float) -> Mbark.MultilayerCompositingFilter.Layer
    public func cornerCurve(_ curve: Mbark.EffectsCornerCurve) -> Mbark.MultilayerCompositingFilter.Layer
    public static func == (a: Mbark.MultilayerCompositingFilter.Layer, b: Mbark.MultilayerCompositingFilter.Layer) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc public var outputPixelFormat: Metal.MTLPixelFormat {
    @objc get
    @objc set
  }
  @objc public var outputImage: Mbark.EffectsImage? {
    @objc get
  }
  public var inputBackgroundImage: Mbark.EffectsImage? {
    get
    set
  }
  public var outputAlphaType: Mbark.EffectsAlphaType {
    get
    set
  }
  public var layers: [Mbark.MultilayerCompositingFilter.Layer] {
    get
    set
  }
  public var rasterSampleCount: Swift.Int {
    get
    set
  }
  @objc deinit
}
extension MultilayerCompositingFilter.Layer : Swift.CustomDebugStringConvertible, Swift.CustomStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
  public var description: Swift.String {
    get
  }
}
extension EffectsError : Swift.Equatable {
}
extension EffectsFunctionDescriptor {
  public static let passthroughFragment: Mbark.EffectsFunctionDescriptor
  public static let passthroughVertex: Mbark.EffectsFunctionDescriptor
}
extension EffectsFunctionDescriptor {
  convenience public init(name: Swift.String, constantValues: Metal.MTLFunctionConstantValues? = nil, in bundle: Foundation.Bundle)
}
extension URL {
  public static func defaultMetalLibraryURL(for bundleForClass: Swift.AnyClass) -> Foundation.URL!
  public static func defaultMetalLibraryURL(for bundle: Foundation.Bundle) -> Foundation.URL!
}
extension CGPoint : Swift.AdditiveArithmetic {
  public static func + (lhs: Mbark.CGPoint, rhs: Mbark.CGPoint) -> Mbark.CGPoint
  public static func - (lhs: Mbark.CGPoint, rhs: Mbark.CGPoint) -> Mbark.CGPoint
  public static func += (lhs: inout Mbark.CGPoint, rhs: Mbark.CGPoint)
  public static func -= (lhs: inout Mbark.CGPoint, rhs: Mbark.CGPoint)
}
extension SignalProtocol {
  public func buffer(size: Swift.Int) -> Mbark.Signal<[Self.Element], Self.Error>
  public func collect() -> Mbark.Signal<[Self.Element], Self.Error>
  public func replaceEmpty(with element: Self.Element) -> Mbark.Signal<Self.Element, Self.Error>
  public func eraseType() -> Mbark.Signal<Swift.Void, Self.Error>
  public func pairwise() -> Mbark.Signal<(Self.Element, Self.Element), Self.Error>
  public func replaceElements<ReplacementElement>(with element: ReplacementElement) -> Mbark.Signal<ReplacementElement, Self.Error>
  public func reduce<U>(_ initial: U, _ combine: @escaping (U, Self.Element) -> U) -> Mbark.Signal<U, Self.Error>
  public func scan<U>(_ initial: U, _ combine: @escaping (U, Self.Element) -> U) -> Mbark.Signal<U, Self.Error>
  public func prepend(_ element: Self.Element) -> Mbark.Signal<Self.Element, Self.Error>
  public func append(_ element: Self.Element) -> Mbark.Signal<Self.Element, Self.Error>
  public func window(ofSize size: Swift.Int) -> Mbark.Signal<Mbark.Signal<Self.Element, Self.Error>, Self.Error>
  public func zipPrevious() -> Mbark.Signal<(Self.Element?, Self.Element), Self.Error>
}
extension Subscribers {
  final public class Sink<Input, Failure> : Mbark.Subscriber, Mbark.Cancellable where Failure : Swift.Error {
    public init(receiveCompletion: @escaping ((Mbark.Subscribers.Completion<Failure>) -> Swift.Void), receiveValue: @escaping ((Input) -> Swift.Void))
    final public let receiveValue: (Input) -> Swift.Void
    final public let receiveCompletion: (Mbark.Subscribers.Completion<Failure>) -> Swift.Void
    final public func receive(subscription: Mbark.Subscription)
    final public func receive(_ value: Input) -> Mbark.Subscribers.Demand
    final public func receive(completion: Mbark.Subscribers.Completion<Failure>)
    final public func cancel()
    @objc deinit
  }
}
public typealias AttribMustacheRenderingFunction = (Foundation.NSAttributedString, (Foundation.NSAttributedString) -> Foundation.NSAttributedString) -> Foundation.NSAttributedString
public typealias AttribMustacheSimpleRenderingFunction = (Foundation.NSAttributedString) -> Foundation.NSAttributedString
public protocol AttributedMustacheRenderingContext {
  var attributedString: Foundation.NSMutableAttributedString { get }
  func append(_ s: Foundation.NSAttributedString)
  var cursor: Any? { get }
  func enter(scope ctx: Any?)
  func leave()
  func value(forTag tag: Swift.String) -> Any?
  func newLambdaContext() -> Mbark.AttributedMustacheRenderingContext
  func retrievePartial(name n: Swift.String) -> Mbark.AttributedMustacheNode?
}
extension AttributedMustacheRenderingContext {
  public func value(forTag tag: Swift.String) -> Any?
  public func retrievePartial(name n: Swift.String) -> Mbark.MustacheNode?
}
open class AttribMustacheDefaultRenderingContext : Mbark.AttributedMustacheRenderingContext {
  final public let attributedString: Foundation.NSMutableAttributedString
  public var stack: [Any?]
  public init(_ root: Any?)
  public init(context: Mbark.AttribMustacheDefaultRenderingContext)
  public func append(_ s: Foundation.NSAttributedString)
  public func enter(scope ctx: Any?)
  public func leave()
  public var cursor: Any? {
    get
  }
  open func value(forTag tag: Swift.String) -> Any?
  open func newLambdaContext() -> Mbark.AttributedMustacheRenderingContext
  open func retrievePartial(name n: Swift.String) -> Mbark.AttributedMustacheNode?
  @objc deinit
}
extension SignalProtocol {
  public func materialize() -> Mbark.Signal<Mbark.Signal<Self.Element, Self.Error>.Event, Swift.Never>
  public func dematerialize<U, E>() -> Mbark.Signal<U, E> where E == Self.Error, Self.Element == Mbark.Signal<U, E>.Event
}
extension SignalProtocol where Self.Error == Swift.Never {
  public func dematerialize<U, E>() -> Mbark.Signal<U, E> where E : Swift.Error, Self.Element == Mbark.Signal<U, E>.Event
}
public protocol SubjectProtocol : Mbark.ObserverProtocol, Mbark.SignalProtocol {
}
extension SubjectProtocol {
  public func send(_ element: Self.Element)
  public func send(completion: Mbark.Subscribers.Completion<Self.Error>)
  public func send(lastElement element: Self.Element)
}
extension SubjectProtocol where Self.Element == Swift.Void {
  public func send()
}
open class Subject<Element, Error> : Mbark.SubjectProtocol where Error : Swift.Error {
  public init()
  open func on(_ event: Mbark.Signal<Element, Error>.Event)
  open func observe(with observer: @escaping Mbark.Observer<Element, Error>) -> Mbark.Disposable
  public var isTerminated: Swift.Bool {
    get
  }
  final public let disposeBag: Mbark.DisposeBag
  @objc deinit
}
extension Subject : Mbark.BindableProtocol {
  public func bind(signal: Mbark.Signal<Element, Swift.Never>) -> Mbark.Disposable
}
@_inheritsConvenienceInitializers final public class PassthroughSubject<Element, Error> : Mbark.Subject<Element, Error> where Error : Swift.Error {
  override public init()
  override final public func on(_ event: Mbark.Signal<Element, Error>.Event)
  override final public func observe(with observer: @escaping (Mbark.Signal<Element, Error>.Event) -> Swift.Void) -> Mbark.Disposable
  @objc deinit
}
final public class ReplaySubject<Element, Error> : Mbark.Subject<Element, Error> where Error : Swift.Error {
  public init(bufferSize: Swift.Int = Int.max)
  final public let bufferSize: Swift.Int
  override final public func on(_ event: Mbark.Signal<Element, Error>.Event)
  override final public func observe(with observer: @escaping (Mbark.Signal<Element, Error>.Event) -> Swift.Void) -> Mbark.Disposable
  override public init()
  @objc deinit
}
public typealias SafeReplaySubject<Element> = Mbark.ReplaySubject<Element, Swift.Never>
@_inheritsConvenienceInitializers final public class ReplayOneSubject<Element, Error> : Mbark.Subject<Element, Error> where Error : Swift.Error {
  override public init()
  override final public func on(_ event: Mbark.Signal<Element, Error>.Event)
  override final public func observe(with observer: @escaping (Mbark.Signal<Element, Error>.Event) -> Swift.Void) -> Mbark.Disposable
  @objc deinit
}
public typealias SafeReplayOneSubject<Element> = Mbark.ReplayOneSubject<Element, Swift.Never>
final public class ReplayLoadingValueSubject<Val, LoadingError, Error> : Mbark.Subject<Mbark.LoadingState<Val, LoadingError>, Error> where LoadingError : Swift.Error, Error : Swift.Error {
  public init(bufferSize: Swift.Int = Int.max)
  final public let bufferSize: Swift.Int
  override final public func on(_ event: Mbark.Signal<Mbark.LoadingState<Val, LoadingError>, Error>.Event)
  override final public func observe(with observer: @escaping (Mbark.Signal<Mbark.LoadingState<Val, LoadingError>, Error>.Event) -> Swift.Void) -> Mbark.Disposable
  override public init()
  @objc deinit
}
extension SignalProtocol {
  public func mapError<F>(_ transform: @escaping (Self.Error) -> F) -> Mbark.Signal<Self.Element, F> where F : Swift.Error
  public func branchOutError() -> (Mbark.Signal<Self.Element, Swift.Never>, Mbark.Signal<Self.Error, Swift.Never>)
  public func branchOutError<F>(_ mapError: @escaping (Self.Error) -> F) -> (Mbark.Signal<Self.Element, Swift.Never>, Mbark.Signal<F, Swift.Never>)
  public func suppressError(logging: Swift.Bool, file: Swift.String = #file, line: Swift.Int = #line) -> Mbark.Signal<Self.Element, Swift.Never>
  public func suppressAndFeedError<S>(into listener: S, logging: Swift.Bool = true, file: Swift.String = #file, line: Swift.Int = #line) -> Mbark.Signal<Self.Element, Swift.Never> where S : Mbark.SubjectProtocol, Self.Error == S.Element
  public func replaceError(with element: Self.Element) -> Mbark.Signal<Self.Element, Swift.Never>
  public func retry(_ times: Swift.Int, if shouldRetry: @escaping (Self.Error) -> Swift.Bool = { _ in true }) -> Mbark.Signal<Self.Element, Self.Error>
  public func retry<S>(when other: S, if shouldRetry: @escaping (Self.Error) -> Swift.Bool = { _ in true }) -> Mbark.Signal<Self.Element, Self.Error> where S : Mbark.SignalProtocol, S.Error == Swift.Never
  public func timeout(after interval: Swift.Double, with error: Self.Error, on queue: Dispatch.DispatchQueue = DispatchQueue(label: "com.mbark.signal.timeout")) -> Mbark.Signal<Self.Element, Self.Error>
  public func toErrorSignal() -> Mbark.Signal<Self.Error, Swift.Never>
}
extension SignalProtocol where Self.Error == Swift.Never {
  public func castError<E>() -> Mbark.Signal<Self.Element, E> where E : Swift.Error
}
@_hasMissingDesignatedInitializers public class Mbark {
  public static var isActive: Swift.Bool {
    get
  }
  @discardableResult
  public static func initialize(instanceName: Swift.String = UUID().uuidString, selectedLanguage: Swift.String? = nil) -> Mbark.MbarkInstance?
  @discardableResult
  public static func initialize(instanceName: Swift.String = UUID().uuidString, remoteConfigId: Swift.String, productionAPIKey: Swift.String? = nil, developmentAPIKey: Swift.String? = nil, selectedLanguage: Swift.String? = nil) -> Mbark.MbarkInstance?
  public static func setMainInstance(name: Swift.String)
  public static func removeInstance(name: Swift.String)
  public static func track(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackOnce(eventType: Mbark.MbarkEventType, step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackFlowStart()
  public static func trackFlowEnd()
  public static func trackStepView(_ step: Swift.String, data: Mbark.MbarkEventData? = nil)
  public static func trackAuthenticationForNewUser()
  public static func trackAuthenticationForExistingUser()
  public static func trackAccept(step: Swift.String? = nil, component: Swift.String? = nil, shouldTrackOnce: Swift.Bool = false)
  public static func trackReject(step: Swift.String? = nil, component: Swift.String? = nil, shouldTrackOnce: Swift.Bool = false)
  public static func trackTap(step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackInput(step: Swift.String? = nil, component: Swift.String? = nil, data: Mbark.MbarkEventData? = nil)
  public static func trackAppLoading()
  public static func onboarding(startingViewId mbarkId: Swift.String, onLoaded: @escaping (Swift.Bool) -> Swift.Void) -> UIKit.UINavigationController?
  public static func mbarkViewController(forMbarkId mbarkId: Swift.String, onLoaded: @escaping (Swift.Bool) -> Swift.Void) -> Mbark.MbarkViewController?
  public static func addActionHandler(_ actionHandler: Mbark.MbarkActionHandler)
  public static func removeActionHandler(forId id: Swift.String)
  public static func addPurchaseActionHandler(_ purchaseActionHandler: Mbark.MbarkPurchaseActionHandler)
  public static func removePurchaseActionHandler(forId id: Swift.String)
  @objc deinit
}
public enum MbarkConstants {
  public static let flushInterval: Swift.Double
  public static let remoteConfigFileName: Swift.String
  public static let urlScheme: Swift.String
}
public protocol OutputPort {
  associatedtype Object : AnyObject
  associatedtype Value
  var object: Self.Object { get }
  var keyPath: Swift.KeyPath<Self.Object, Self.Value> { get }
}
public protocol InputPort {
  associatedtype Object : AnyObject
  associatedtype Value
  var object: Self.Object { get }
  var writableKeyPath: Swift.ReferenceWritableKeyPath<Self.Object, Self.Value> { get }
}
public struct Port<Object, Value, Property> where Object : AnyObject, Property : Swift.KeyPath<Object, Value> {
  public let object: Object
}
extension Port : Mbark.OutputPort {
  public var keyPath: Swift.KeyPath<Object, Value> {
    get
  }
}
extension Port : Mbark.InputPort where Property : Swift.ReferenceWritableKeyPath<Object, Value> {
  public var writableKeyPath: Swift.ReferenceWritableKeyPath<Object, Value> {
    get
  }
}
public struct ProxyPortTarget {
  public let object: Swift.AnyObject
  public let keyPath: Swift.AnyKeyPath?
  public let writableKeyPath: Swift.AnyKeyPath?
  public init(object: Swift.AnyObject, keyPath: Swift.AnyKeyPath? = nil, writableKeyPath: Swift.AnyKeyPath? = nil)
}
public protocol ProxyPort {
  var target: Mbark.ProxyPortTarget { get }
}
@_hasMissingDesignatedInitializers public class FilterGraph {
  @_hasMissingDesignatedInitializers public class ImageReceiver {
    @objc deinit
  }
  public typealias ImageReceiverInputPort = Mbark.Port<Mbark.FilterGraph.ImageReceiver, Mbark.EffectsImage?, Swift.ReferenceWritableKeyPath<Mbark.FilterGraph.ImageReceiver, Mbark.EffectsImage?>>
  public static func makeImage<T>(input: T, builder: (T, Mbark.FilterGraph.ImageReceiverInputPort) -> Swift.Void) -> Mbark.EffectsImage?
  public static func connect(builder: () -> Swift.Void)
  public static func makeImage(builder: (Mbark.FilterGraph.ImageReceiverInputPort) -> Swift.Void) -> Mbark.EffectsImage?
  @objc deinit
}
@dynamicMemberLookup public struct FilterInputPorts<Filter> where Filter : AnyObject {
  public init(filter: Filter)
  public typealias InputKeyPath = Swift.ReferenceWritableKeyPath<Filter, Mbark.EffectsImage?>
  public subscript(dynamicMember keyPath: Mbark.FilterInputPorts<Filter>.InputKeyPath) -> Mbark.Port<Filter, Mbark.EffectsImage?, Mbark.FilterInputPorts<Filter>.InputKeyPath> {
    get
  }
}
extension EffectsFilter {
  public var outputPort: Mbark.Port<Self, Mbark.EffectsImage?, Swift.KeyPath<Self, Mbark.EffectsImage?>> {
    get
  }
  public var inputPorts: Mbark.FilterInputPorts<Self> {
    get
  }
}
public struct UnaryFilterIOPort<Filter> : Mbark.InputPort, Mbark.OutputPort where Filter : Mbark.EffectsUnaryFilter {
  public let object: Filter
  public let keyPath: Swift.KeyPath<Filter, Mbark.EffectsImage?>
  public let writableKeyPath: Swift.ReferenceWritableKeyPath<Filter, Mbark.EffectsImage?>
  public typealias Object = Filter
  public typealias Value = Swift.Optional<Mbark.EffectsImage>
}
extension EffectsUnaryFilter {
  public var ioPort: Mbark.UnaryFilterIOPort<Self> {
    get
  }
}
extension EffectsImage {
  public struct Port : Mbark.OutputPort {
    public let object: Mbark.EffectsImage
    public let keyPath: Swift.KeyPath<Mbark.EffectsImage, Mbark.EffectsImage?>
    public typealias Object = Mbark.EffectsImage
    public typealias Value = Swift.Optional<Mbark.EffectsImage>
  }
  public var outputPort: Mbark.EffectsImage.Port {
    get
  }
}
public class PassthroughPort<Value> : Mbark.InputPort, Mbark.OutputPort {
  public init(_ value: Value)
  public var writableKeyPath: Swift.ReferenceWritableKeyPath<Mbark.PassthroughPort<Value>, Value>
  public var keyPath: Swift.KeyPath<Mbark.PassthroughPort<Value>, Value>
  public var object: Mbark.PassthroughPort<Value> {
    get
  }
  public typealias Object = Mbark.PassthroughPort<Value>
  @objc deinit
}
public typealias ImagePassthroughPort = Mbark.PassthroughPort<Mbark.EffectsImage?>
extension PassthroughPort where Value == Mbark.EffectsImage? {
  convenience public init()
}
public struct AnyIOPort<Value> : Mbark.InputPort, Mbark.OutputPort, Mbark.ProxyPort {
  public init<T>(_ port: T) where Value == T.Value, T : Mbark.InputPort, T : Mbark.OutputPort
  @_hasMissingDesignatedInitializers public class ObjectProxy {
    @objc deinit
  }
  public let object: Mbark.AnyIOPort<Value>.ObjectProxy
  public let keyPath: Swift.KeyPath<Mbark.AnyIOPort<Value>.ObjectProxy, Value>
  public let writableKeyPath: Swift.ReferenceWritableKeyPath<Mbark.AnyIOPort<Value>.ObjectProxy, Value>
  public let target: Mbark.ProxyPortTarget
  public typealias Object = Mbark.AnyIOPort<Value>.ObjectProxy
}
extension AnyIOPort {
  public init<T>(_ filter: T) where Value == Mbark.EffectsImage?, T : Mbark.EffectsUnaryFilter
}
public struct AnyInputPort<Value> : Mbark.InputPort, Mbark.ProxyPort {
  public init<T>(_ port: T) where Value == T.Value, T : Mbark.InputPort
  @_hasMissingDesignatedInitializers public class ObjectProxy {
    @objc deinit
  }
  public let object: Mbark.AnyInputPort<Value>.ObjectProxy
  public let writableKeyPath: Swift.ReferenceWritableKeyPath<Mbark.AnyInputPort<Value>.ObjectProxy, Value>
  public let target: Mbark.ProxyPortTarget
  public typealias Object = Mbark.AnyInputPort<Value>.ObjectProxy
}
extension AnyInputPort {
  public init<T>(_ filter: T) where Value == Mbark.EffectsImage?, T : Mbark.EffectsUnaryFilter
}
public struct AnyOutputPort<Value> : Mbark.OutputPort, Mbark.ProxyPort {
  public init<T>(_ port: T) where Value == T.Value, T : Mbark.OutputPort
  @_hasMissingDesignatedInitializers public class ObjectProxy {
    @objc deinit
  }
  public let object: Mbark.AnyOutputPort<Value>.ObjectProxy
  public let keyPath: Swift.KeyPath<Mbark.AnyOutputPort<Value>.ObjectProxy, Value>
  public let target: Mbark.ProxyPortTarget
  public typealias Object = Mbark.AnyOutputPort<Value>.ObjectProxy
}
extension AnyOutputPort {
  public init<T>(_ filter: T) where Value == Mbark.EffectsImage?, T : Mbark.EffectsFilter
}
extension AnyOutputPort where Value == Mbark.EffectsImage? {
  public init(_ image: Mbark.EffectsImage)
}
public protocol OutputPortProvider {
  associatedtype Port : Mbark.OutputPort
  var outputPort: Self.Port { get }
}
public protocol InputPortProvider {
  associatedtype Port : Mbark.InputPort
  var inputPort: Self.Port { get }
}
extension EffectsImage : Mbark.OutputPortProvider {
}
infix operator => : AdditionPrecedence
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.OutputPort, Input : Mbark.InputPort, Output.Value == Mbark.EffectsImage?, Input.Value == Mbark.EffectsImage?
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.OutputPortProvider, Input : Mbark.InputPort, Input.Value == Mbark.EffectsImage?, Output.Port.Value == Mbark.EffectsImage?
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.OutputPortProvider, Input : Mbark.EffectsUnaryFilter, Output.Port.Value == Mbark.EffectsImage?
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.EffectsFilter, Input : Mbark.InputPort, Input.Value == Mbark.EffectsImage?
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.EffectsFilter, Input : Mbark.EffectsUnaryFilter
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.OutputPort, Input : Mbark.EffectsUnaryFilter, Output.Value == Mbark.EffectsImage?
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.EffectsFilter, Input : Mbark.InputPortProvider, Input.Port.Value == Mbark.EffectsImage?
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.OutputPort, Input : Mbark.InputPortProvider, Output.Value == Mbark.EffectsImage?, Input.Port.Value == Mbark.EffectsImage?
@discardableResult
public func => <Output, Input>(lhs: Output, rhs: Input) -> Input where Output : Mbark.OutputPortProvider, Input : Mbark.InputPortProvider, Output.Port.Value == Mbark.EffectsImage?, Input.Port.Value == Mbark.EffectsImage?
@available(iOS 13.0, macOS 10.15, *)
extension FilterGraph {
  public static func makePublisher<T>(upstream: T, builder: @escaping (T.Output, Mbark.FilterGraph.ImageReceiverInputPort) -> Swift.Void) -> Combine.AnyPublisher<Mbark.EffectsImage?, Swift.Never> where T : Combine.Publisher, T.Failure == Swift.Never
}
extension Mustache {
  public static func parse(_ template: Foundation.NSAttributedString) -> Mbark.AttributedMustacheNode
}
extension SignalProtocol {
  public func flatMap<NewElement>(_ transform: @escaping (Self.Element) -> [NewElement]) -> Mbark.Signal<NewElement, Self.Error>
}
extension SignalProtocol where Self.Element : Swift.Sequence {
  public func mapElement<NewElement>(_ transform: @escaping (Self.Element.Iterator.Element) -> NewElement) -> Mbark.Signal<[NewElement], Self.Error>
  public func flattenElements() -> Mbark.Signal<Self.Element.Iterator.Element, Self.Error>
}
extension Mbark.EffectsVideoCompositionRequestHandler.Error : Swift.Equatable {}
extension Mbark.EffectsVideoCompositionRequestHandler.Error : Swift.Hashable {}
extension Mbark.EffectsVideoComposition.Error : Swift.Equatable {}
extension Mbark.EffectsVideoComposition.Error : Swift.Hashable {}
extension Mbark.TimelaneLaneType : Swift.Equatable {}
extension Mbark.TimelaneLaneType : Swift.Hashable {}
extension Mbark.TimelaneLaneType : Swift.RawRepresentable {}
extension Mbark.MbarkEventType : Swift.Equatable {}
extension Mbark.MbarkEventType : Swift.Hashable {}
extension Mbark.MbarkEventType : Swift.RawRepresentable {}
extension Mbark.MbarkStepNames : Swift.Equatable {}
extension Mbark.MbarkStepNames : Swift.Hashable {}
extension Mbark.MbarkStepNames : Swift.RawRepresentable {}
extension Mbark.AuthenticationUserType : Swift.Equatable {}
extension Mbark.AuthenticationUserType : Swift.Hashable {}
extension Mbark.AuthenticationUserType : Swift.RawRepresentable {}
extension Mbark.EffectsSIMDArgumentEncoder.Error : Swift.Equatable {}
extension Mbark.EffectsSIMDArgumentEncoder.Error : Swift.Hashable {}
extension Mbark.EffectsSIMDArgumentEncoder.Error : Swift.RawRepresentable {}
extension Mbark.CGImageDisplacementTransition.Error : Swift.Equatable {}
extension Mbark.CGImageDisplacementTransition.Error : Swift.Hashable {}
extension Mbark.FlattenStrategy : Swift.Equatable {}
extension Mbark.FlattenStrategy : Swift.Hashable {}
extension Mbark.CGCrossZoomTransition.Error : Swift.Equatable {}
extension Mbark.CGCrossZoomTransition.Error : Swift.Hashable {}
@available(iOS 11.0, macOS 10.13, *)
extension Mbark.EffectsCoreImageKernel.Error : Swift.Equatable {}
@available(iOS 11.0, macOS 10.13, *)
extension Mbark.EffectsCoreImageKernel.Error : Swift.Hashable {}
